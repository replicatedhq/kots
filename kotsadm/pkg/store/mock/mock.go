// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/store/store_interface.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "github.com/replicatedhq/kots/kotsadm/pkg/airgap/types"
	types0 "github.com/replicatedhq/kots/kotsadm/pkg/app/types"
	types1 "github.com/replicatedhq/kots/kotsadm/pkg/appstatus/types"
	types2 "github.com/replicatedhq/kots/kotsadm/pkg/downstream/types"
	types3 "github.com/replicatedhq/kots/kotsadm/pkg/gitops/types"
	types4 "github.com/replicatedhq/kots/kotsadm/pkg/online/types"
	types5 "github.com/replicatedhq/kots/kotsadm/pkg/preflight/types"
	types6 "github.com/replicatedhq/kots/kotsadm/pkg/registry/types"
	types7 "github.com/replicatedhq/kots/kotsadm/pkg/session/types"
	types8 "github.com/replicatedhq/kots/kotsadm/pkg/snapshot/types"
	types9 "github.com/replicatedhq/kots/kotsadm/pkg/supportbundle/types"
	types10 "github.com/replicatedhq/kots/kotsadm/pkg/user/types"
	types11 "github.com/replicatedhq/kots/kotsadm/pkg/version/types"
	v1beta1 "github.com/replicatedhq/kots/kotskinds/apis/kots/v1beta1"
	kotsutil "github.com/replicatedhq/kots/pkg/kotsutil"
	redact "github.com/replicatedhq/troubleshoot/pkg/redact"
	reflect "reflect"
	time "time"
)

// MockKOTSStore is a mock of KOTSStore interface
type MockKOTSStore struct {
	ctrl     *gomock.Controller
	recorder *MockKOTSStoreMockRecorder
}

// MockKOTSStoreMockRecorder is the mock recorder for MockKOTSStore
type MockKOTSStoreMockRecorder struct {
	mock *MockKOTSStore
}

// NewMockKOTSStore creates a new mock instance
func NewMockKOTSStore(ctrl *gomock.Controller) *MockKOTSStore {
	mock := &MockKOTSStore{ctrl: ctrl}
	mock.recorder = &MockKOTSStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKOTSStore) EXPECT() *MockKOTSStoreMockRecorder {
	return m.recorder
}

// RunMigrations mocks base method
func (m *MockKOTSStore) RunMigrations() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunMigrations")
}

// RunMigrations indicates an expected call of RunMigrations
func (mr *MockKOTSStoreMockRecorder) RunMigrations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMigrations", reflect.TypeOf((*MockKOTSStore)(nil).RunMigrations))
}

// GetRegistryDetailsForApp mocks base method
func (m *MockKOTSStore) GetRegistryDetailsForApp(appID string) (*types6.RegistrySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryDetailsForApp", appID)
	ret0, _ := ret[0].(*types6.RegistrySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistryDetailsForApp indicates an expected call of GetRegistryDetailsForApp
func (mr *MockKOTSStoreMockRecorder) GetRegistryDetailsForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryDetailsForApp", reflect.TypeOf((*MockKOTSStore)(nil).GetRegistryDetailsForApp), appID)
}

// UpdateRegistry mocks base method
func (m *MockKOTSStore) UpdateRegistry(appID, hostname, username, password, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistry", appID, hostname, username, password, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRegistry indicates an expected call of UpdateRegistry
func (mr *MockKOTSStoreMockRecorder) UpdateRegistry(appID, hostname, username, password, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistry", reflect.TypeOf((*MockKOTSStore)(nil).UpdateRegistry), appID, hostname, username, password, namespace)
}

// ListSupportBundles mocks base method
func (m *MockKOTSStore) ListSupportBundles(appID string) ([]*types9.SupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportBundles", appID)
	ret0, _ := ret[0].([]*types9.SupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSupportBundles indicates an expected call of ListSupportBundles
func (mr *MockKOTSStoreMockRecorder) ListSupportBundles(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportBundles", reflect.TypeOf((*MockKOTSStore)(nil).ListSupportBundles), appID)
}

// ListPendingSupportBundlesForApp mocks base method
func (m *MockKOTSStore) ListPendingSupportBundlesForApp(appID string) ([]*types9.PendingSupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingSupportBundlesForApp", appID)
	ret0, _ := ret[0].([]*types9.PendingSupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingSupportBundlesForApp indicates an expected call of ListPendingSupportBundlesForApp
func (mr *MockKOTSStoreMockRecorder) ListPendingSupportBundlesForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingSupportBundlesForApp", reflect.TypeOf((*MockKOTSStore)(nil).ListPendingSupportBundlesForApp), appID)
}

// GetSupportBundleFromSlug mocks base method
func (m *MockKOTSStore) GetSupportBundleFromSlug(slug string) (*types9.SupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundleFromSlug", slug)
	ret0, _ := ret[0].(*types9.SupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundleFromSlug indicates an expected call of GetSupportBundleFromSlug
func (mr *MockKOTSStoreMockRecorder) GetSupportBundleFromSlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundleFromSlug", reflect.TypeOf((*MockKOTSStore)(nil).GetSupportBundleFromSlug), slug)
}

// GetSupportBundle mocks base method
func (m *MockKOTSStore) GetSupportBundle(bundleID string) (*types9.SupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundle", bundleID)
	ret0, _ := ret[0].(*types9.SupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundle indicates an expected call of GetSupportBundle
func (mr *MockKOTSStoreMockRecorder) GetSupportBundle(bundleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundle", reflect.TypeOf((*MockKOTSStore)(nil).GetSupportBundle), bundleID)
}

// CreatePendingSupportBundle mocks base method
func (m *MockKOTSStore) CreatePendingSupportBundle(bundleID, appID, clusterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePendingSupportBundle", bundleID, appID, clusterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePendingSupportBundle indicates an expected call of CreatePendingSupportBundle
func (mr *MockKOTSStoreMockRecorder) CreatePendingSupportBundle(bundleID, appID, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePendingSupportBundle", reflect.TypeOf((*MockKOTSStore)(nil).CreatePendingSupportBundle), bundleID, appID, clusterID)
}

// CreateSupportBundle mocks base method
func (m *MockKOTSStore) CreateSupportBundle(bundleID, appID, archivePath string, marshalledTree []byte) (*types9.SupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupportBundle", bundleID, appID, archivePath, marshalledTree)
	ret0, _ := ret[0].(*types9.SupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSupportBundle indicates an expected call of CreateSupportBundle
func (mr *MockKOTSStoreMockRecorder) CreateSupportBundle(bundleID, appID, archivePath, marshalledTree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupportBundle", reflect.TypeOf((*MockKOTSStore)(nil).CreateSupportBundle), bundleID, appID, archivePath, marshalledTree)
}

// GetSupportBundleArchive mocks base method
func (m *MockKOTSStore) GetSupportBundleArchive(bundleID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundleArchive", bundleID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundleArchive indicates an expected call of GetSupportBundleArchive
func (mr *MockKOTSStoreMockRecorder) GetSupportBundleArchive(bundleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundleArchive", reflect.TypeOf((*MockKOTSStore)(nil).GetSupportBundleArchive), bundleID)
}

// GetSupportBundleAnalysis mocks base method
func (m *MockKOTSStore) GetSupportBundleAnalysis(bundleID string) (*types9.SupportBundleAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundleAnalysis", bundleID)
	ret0, _ := ret[0].(*types9.SupportBundleAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundleAnalysis indicates an expected call of GetSupportBundleAnalysis
func (mr *MockKOTSStoreMockRecorder) GetSupportBundleAnalysis(bundleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundleAnalysis", reflect.TypeOf((*MockKOTSStore)(nil).GetSupportBundleAnalysis), bundleID)
}

// SetSupportBundleAnalysis mocks base method
func (m *MockKOTSStore) SetSupportBundleAnalysis(bundleID string, insights []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSupportBundleAnalysis", bundleID, insights)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSupportBundleAnalysis indicates an expected call of SetSupportBundleAnalysis
func (mr *MockKOTSStoreMockRecorder) SetSupportBundleAnalysis(bundleID, insights interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSupportBundleAnalysis", reflect.TypeOf((*MockKOTSStore)(nil).SetSupportBundleAnalysis), bundleID, insights)
}

// GetRedactions mocks base method
func (m *MockKOTSStore) GetRedactions(bundleID string) (redact.RedactionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedactions", bundleID)
	ret0, _ := ret[0].(redact.RedactionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedactions indicates an expected call of GetRedactions
func (mr *MockKOTSStoreMockRecorder) GetRedactions(bundleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedactions", reflect.TypeOf((*MockKOTSStore)(nil).GetRedactions), bundleID)
}

// SetRedactions mocks base method
func (m *MockKOTSStore) SetRedactions(bundleID string, redacts redact.RedactionList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRedactions", bundleID, redacts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRedactions indicates an expected call of SetRedactions
func (mr *MockKOTSStoreMockRecorder) SetRedactions(bundleID, redacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedactions", reflect.TypeOf((*MockKOTSStore)(nil).SetRedactions), bundleID, redacts)
}

// GetSupportBundleSpecForApp mocks base method
func (m *MockKOTSStore) GetSupportBundleSpecForApp(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundleSpecForApp", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundleSpecForApp indicates an expected call of GetSupportBundleSpecForApp
func (mr *MockKOTSStoreMockRecorder) GetSupportBundleSpecForApp(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundleSpecForApp", reflect.TypeOf((*MockKOTSStore)(nil).GetSupportBundleSpecForApp), id)
}

// SetPreflightResults mocks base method
func (m *MockKOTSStore) SetPreflightResults(appID string, sequence int64, results []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPreflightResults", appID, sequence, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPreflightResults indicates an expected call of SetPreflightResults
func (mr *MockKOTSStoreMockRecorder) SetPreflightResults(appID, sequence, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreflightResults", reflect.TypeOf((*MockKOTSStore)(nil).SetPreflightResults), appID, sequence, results)
}

// GetPreflightResults mocks base method
func (m *MockKOTSStore) GetPreflightResults(appID string, sequence int64) (*types5.PreflightResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreflightResults", appID, sequence)
	ret0, _ := ret[0].(*types5.PreflightResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreflightResults indicates an expected call of GetPreflightResults
func (mr *MockKOTSStoreMockRecorder) GetPreflightResults(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreflightResults", reflect.TypeOf((*MockKOTSStore)(nil).GetPreflightResults), appID, sequence)
}

// GetLatestPreflightResultsForSequenceZero mocks base method
func (m *MockKOTSStore) GetLatestPreflightResultsForSequenceZero() (*types5.PreflightResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPreflightResultsForSequenceZero")
	ret0, _ := ret[0].(*types5.PreflightResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPreflightResultsForSequenceZero indicates an expected call of GetLatestPreflightResultsForSequenceZero
func (mr *MockKOTSStoreMockRecorder) GetLatestPreflightResultsForSequenceZero() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPreflightResultsForSequenceZero", reflect.TypeOf((*MockKOTSStore)(nil).GetLatestPreflightResultsForSequenceZero))
}

// ResetPreflightResults mocks base method
func (m *MockKOTSStore) ResetPreflightResults(appID string, sequence int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPreflightResults", appID, sequence)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPreflightResults indicates an expected call of ResetPreflightResults
func (mr *MockKOTSStoreMockRecorder) ResetPreflightResults(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPreflightResults", reflect.TypeOf((*MockKOTSStore)(nil).ResetPreflightResults), appID, sequence)
}

// SetIgnorePreflightPermissionErrors mocks base method
func (m *MockKOTSStore) SetIgnorePreflightPermissionErrors(appID string, sequence int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIgnorePreflightPermissionErrors", appID, sequence)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIgnorePreflightPermissionErrors indicates an expected call of SetIgnorePreflightPermissionErrors
func (mr *MockKOTSStoreMockRecorder) SetIgnorePreflightPermissionErrors(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIgnorePreflightPermissionErrors", reflect.TypeOf((*MockKOTSStore)(nil).SetIgnorePreflightPermissionErrors), appID, sequence)
}

// GetPrometheusAddress mocks base method
func (m *MockKOTSStore) GetPrometheusAddress() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrometheusAddress")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrometheusAddress indicates an expected call of GetPrometheusAddress
func (mr *MockKOTSStoreMockRecorder) GetPrometheusAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrometheusAddress", reflect.TypeOf((*MockKOTSStore)(nil).GetPrometheusAddress))
}

// SetPrometheusAddress mocks base method
func (m *MockKOTSStore) SetPrometheusAddress(address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrometheusAddress", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrometheusAddress indicates an expected call of SetPrometheusAddress
func (mr *MockKOTSStoreMockRecorder) SetPrometheusAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrometheusAddress", reflect.TypeOf((*MockKOTSStore)(nil).SetPrometheusAddress), address)
}

// GetPendingAirgapUploadApp mocks base method
func (m *MockKOTSStore) GetPendingAirgapUploadApp() (*types.PendingApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingAirgapUploadApp")
	ret0, _ := ret[0].(*types.PendingApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingAirgapUploadApp indicates an expected call of GetPendingAirgapUploadApp
func (mr *MockKOTSStoreMockRecorder) GetPendingAirgapUploadApp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingAirgapUploadApp", reflect.TypeOf((*MockKOTSStore)(nil).GetPendingAirgapUploadApp))
}

// GetAirgapInstallStatus mocks base method
func (m *MockKOTSStore) GetAirgapInstallStatus() (*types.InstallStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAirgapInstallStatus")
	ret0, _ := ret[0].(*types.InstallStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAirgapInstallStatus indicates an expected call of GetAirgapInstallStatus
func (mr *MockKOTSStoreMockRecorder) GetAirgapInstallStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAirgapInstallStatus", reflect.TypeOf((*MockKOTSStore)(nil).GetAirgapInstallStatus))
}

// ResetAirgapInstallInProgress mocks base method
func (m *MockKOTSStore) ResetAirgapInstallInProgress(appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAirgapInstallInProgress", appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAirgapInstallInProgress indicates an expected call of ResetAirgapInstallInProgress
func (mr *MockKOTSStoreMockRecorder) ResetAirgapInstallInProgress(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAirgapInstallInProgress", reflect.TypeOf((*MockKOTSStore)(nil).ResetAirgapInstallInProgress), appID)
}

// SetAppIsAirgap mocks base method
func (m *MockKOTSStore) SetAppIsAirgap(appID string, isAirgap bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppIsAirgap", appID, isAirgap)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppIsAirgap indicates an expected call of SetAppIsAirgap
func (mr *MockKOTSStoreMockRecorder) SetAppIsAirgap(appID, isAirgap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppIsAirgap", reflect.TypeOf((*MockKOTSStore)(nil).SetAppIsAirgap), appID, isAirgap)
}

// SetTaskStatus mocks base method
func (m *MockKOTSStore) SetTaskStatus(taskID, message, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskStatus", taskID, message, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTaskStatus indicates an expected call of SetTaskStatus
func (mr *MockKOTSStoreMockRecorder) SetTaskStatus(taskID, message, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskStatus", reflect.TypeOf((*MockKOTSStore)(nil).SetTaskStatus), taskID, message, status)
}

// UpdateTaskStatusTimestamp mocks base method
func (m *MockKOTSStore) UpdateTaskStatusTimestamp(taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatusTimestamp", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatusTimestamp indicates an expected call of UpdateTaskStatusTimestamp
func (mr *MockKOTSStoreMockRecorder) UpdateTaskStatusTimestamp(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatusTimestamp", reflect.TypeOf((*MockKOTSStore)(nil).UpdateTaskStatusTimestamp), taskID)
}

// ClearTaskStatus mocks base method
func (m *MockKOTSStore) ClearTaskStatus(taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearTaskStatus", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearTaskStatus indicates an expected call of ClearTaskStatus
func (mr *MockKOTSStoreMockRecorder) ClearTaskStatus(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearTaskStatus", reflect.TypeOf((*MockKOTSStore)(nil).ClearTaskStatus), taskID)
}

// GetTaskStatus mocks base method
func (m *MockKOTSStore) GetTaskStatus(taskID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatus", taskID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTaskStatus indicates an expected call of GetTaskStatus
func (mr *MockKOTSStoreMockRecorder) GetTaskStatus(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatus", reflect.TypeOf((*MockKOTSStore)(nil).GetTaskStatus), taskID)
}

// CreateSession mocks base method
func (m *MockKOTSStore) CreateSession(user *types10.User, issuedAt, expiresAt time.Time, roles []string) (*types7.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", user, issuedAt, expiresAt, roles)
	ret0, _ := ret[0].(*types7.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockKOTSStoreMockRecorder) CreateSession(user, issuedAt, expiresAt, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockKOTSStore)(nil).CreateSession), user, issuedAt, expiresAt, roles)
}

// DeleteSession mocks base method
func (m *MockKOTSStore) DeleteSession(sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockKOTSStoreMockRecorder) DeleteSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockKOTSStore)(nil).DeleteSession), sessionID)
}

// GetSession mocks base method
func (m *MockKOTSStore) GetSession(sessionID string) (*types7.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(*types7.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession
func (mr *MockKOTSStoreMockRecorder) GetSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockKOTSStore)(nil).GetSession), sessionID)
}

// GetAppStatus mocks base method
func (m *MockKOTSStore) GetAppStatus(appID string) (*types1.AppStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStatus", appID)
	ret0, _ := ret[0].(*types1.AppStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppStatus indicates an expected call of GetAppStatus
func (mr *MockKOTSStoreMockRecorder) GetAppStatus(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStatus", reflect.TypeOf((*MockKOTSStore)(nil).GetAppStatus), appID)
}

// AddAppToAllDownstreams mocks base method
func (m *MockKOTSStore) AddAppToAllDownstreams(appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAppToAllDownstreams", appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAppToAllDownstreams indicates an expected call of AddAppToAllDownstreams
func (mr *MockKOTSStoreMockRecorder) AddAppToAllDownstreams(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppToAllDownstreams", reflect.TypeOf((*MockKOTSStore)(nil).AddAppToAllDownstreams), appID)
}

// SetAppInstallState mocks base method
func (m *MockKOTSStore) SetAppInstallState(appID, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppInstallState", appID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppInstallState indicates an expected call of SetAppInstallState
func (mr *MockKOTSStoreMockRecorder) SetAppInstallState(appID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppInstallState", reflect.TypeOf((*MockKOTSStore)(nil).SetAppInstallState), appID, state)
}

// ListInstalledApps mocks base method
func (m *MockKOTSStore) ListInstalledApps() ([]*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstalledApps")
	ret0, _ := ret[0].([]*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstalledApps indicates an expected call of ListInstalledApps
func (mr *MockKOTSStoreMockRecorder) ListInstalledApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstalledApps", reflect.TypeOf((*MockKOTSStore)(nil).ListInstalledApps))
}

// ListInstalledAppSlugs mocks base method
func (m *MockKOTSStore) ListInstalledAppSlugs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstalledAppSlugs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstalledAppSlugs indicates an expected call of ListInstalledAppSlugs
func (mr *MockKOTSStoreMockRecorder) ListInstalledAppSlugs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstalledAppSlugs", reflect.TypeOf((*MockKOTSStore)(nil).ListInstalledAppSlugs))
}

// GetAppIDFromSlug mocks base method
func (m *MockKOTSStore) GetAppIDFromSlug(slug string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppIDFromSlug", slug)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppIDFromSlug indicates an expected call of GetAppIDFromSlug
func (mr *MockKOTSStoreMockRecorder) GetAppIDFromSlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppIDFromSlug", reflect.TypeOf((*MockKOTSStore)(nil).GetAppIDFromSlug), slug)
}

// GetApp mocks base method
func (m *MockKOTSStore) GetApp(appID string) (*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", appID)
	ret0, _ := ret[0].(*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp
func (mr *MockKOTSStoreMockRecorder) GetApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockKOTSStore)(nil).GetApp), appID)
}

// GetAppFromSlug mocks base method
func (m *MockKOTSStore) GetAppFromSlug(slug string) (*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppFromSlug", slug)
	ret0, _ := ret[0].(*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppFromSlug indicates an expected call of GetAppFromSlug
func (mr *MockKOTSStoreMockRecorder) GetAppFromSlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppFromSlug", reflect.TypeOf((*MockKOTSStore)(nil).GetAppFromSlug), slug)
}

// CreateApp mocks base method
func (m *MockKOTSStore) CreateApp(name, upstreamURI, licenseData string, isAirgapEnabled, skipImagePush bool) (*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", name, upstreamURI, licenseData, isAirgapEnabled, skipImagePush)
	ret0, _ := ret[0].(*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp
func (mr *MockKOTSStoreMockRecorder) CreateApp(name, upstreamURI, licenseData, isAirgapEnabled, skipImagePush interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockKOTSStore)(nil).CreateApp), name, upstreamURI, licenseData, isAirgapEnabled, skipImagePush)
}

// ListDownstreamsForApp mocks base method
func (m *MockKOTSStore) ListDownstreamsForApp(appID string) ([]types2.Downstream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownstreamsForApp", appID)
	ret0, _ := ret[0].([]types2.Downstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDownstreamsForApp indicates an expected call of ListDownstreamsForApp
func (mr *MockKOTSStoreMockRecorder) ListDownstreamsForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownstreamsForApp", reflect.TypeOf((*MockKOTSStore)(nil).ListDownstreamsForApp), appID)
}

// ListAppsForDownstream mocks base method
func (m *MockKOTSStore) ListAppsForDownstream(clusterID string) ([]*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsForDownstream", clusterID)
	ret0, _ := ret[0].([]*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppsForDownstream indicates an expected call of ListAppsForDownstream
func (mr *MockKOTSStoreMockRecorder) ListAppsForDownstream(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsForDownstream", reflect.TypeOf((*MockKOTSStore)(nil).ListAppsForDownstream), clusterID)
}

// GetDownstream mocks base method
func (m *MockKOTSStore) GetDownstream(clusterID string) (*types2.Downstream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownstream", clusterID)
	ret0, _ := ret[0].(*types2.Downstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownstream indicates an expected call of GetDownstream
func (mr *MockKOTSStoreMockRecorder) GetDownstream(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownstream", reflect.TypeOf((*MockKOTSStore)(nil).GetDownstream), clusterID)
}

// IsGitOpsEnabledForApp mocks base method
func (m *MockKOTSStore) IsGitOpsEnabledForApp(appID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGitOpsEnabledForApp", appID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsGitOpsEnabledForApp indicates an expected call of IsGitOpsEnabledForApp
func (mr *MockKOTSStoreMockRecorder) IsGitOpsEnabledForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGitOpsEnabledForApp", reflect.TypeOf((*MockKOTSStore)(nil).IsGitOpsEnabledForApp), appID)
}

// SetUpdateCheckerSpec mocks base method
func (m *MockKOTSStore) SetUpdateCheckerSpec(appID, updateCheckerSpec string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpdateCheckerSpec", appID, updateCheckerSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpdateCheckerSpec indicates an expected call of SetUpdateCheckerSpec
func (mr *MockKOTSStoreMockRecorder) SetUpdateCheckerSpec(appID, updateCheckerSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdateCheckerSpec", reflect.TypeOf((*MockKOTSStore)(nil).SetUpdateCheckerSpec), appID, updateCheckerSpec)
}

// SetSnapshotTTL mocks base method
func (m *MockKOTSStore) SetSnapshotTTL(appID, snapshotTTL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnapshotTTL", appID, snapshotTTL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSnapshotTTL indicates an expected call of SetSnapshotTTL
func (mr *MockKOTSStoreMockRecorder) SetSnapshotTTL(appID, snapshotTTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotTTL", reflect.TypeOf((*MockKOTSStore)(nil).SetSnapshotTTL), appID, snapshotTTL)
}

// SetSnapshotSchedule mocks base method
func (m *MockKOTSStore) SetSnapshotSchedule(appID, snapshotSchedule string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnapshotSchedule", appID, snapshotSchedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSnapshotSchedule indicates an expected call of SetSnapshotSchedule
func (mr *MockKOTSStoreMockRecorder) SetSnapshotSchedule(appID, snapshotSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotSchedule", reflect.TypeOf((*MockKOTSStore)(nil).SetSnapshotSchedule), appID, snapshotSchedule)
}

// RemoveApp mocks base method
func (m *MockKOTSStore) RemoveApp(appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveApp", appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveApp indicates an expected call of RemoveApp
func (mr *MockKOTSStoreMockRecorder) RemoveApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveApp", reflect.TypeOf((*MockKOTSStore)(nil).RemoveApp), appID)
}

// IsIdentityServiceSupportedForVersion mocks base method
func (m *MockKOTSStore) IsIdentityServiceSupportedForVersion(appID string, sequence int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIdentityServiceSupportedForVersion", appID, sequence)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsIdentityServiceSupportedForVersion indicates an expected call of IsIdentityServiceSupportedForVersion
func (mr *MockKOTSStoreMockRecorder) IsIdentityServiceSupportedForVersion(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIdentityServiceSupportedForVersion", reflect.TypeOf((*MockKOTSStore)(nil).IsIdentityServiceSupportedForVersion), appID, sequence)
}

// IsRollbackSupportedForVersion mocks base method
func (m *MockKOTSStore) IsRollbackSupportedForVersion(appID string, sequence int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRollbackSupportedForVersion", appID, sequence)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRollbackSupportedForVersion indicates an expected call of IsRollbackSupportedForVersion
func (mr *MockKOTSStoreMockRecorder) IsRollbackSupportedForVersion(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRollbackSupportedForVersion", reflect.TypeOf((*MockKOTSStore)(nil).IsRollbackSupportedForVersion), appID, sequence)
}

// IsSnapshotsSupportedForVersion mocks base method
func (m *MockKOTSStore) IsSnapshotsSupportedForVersion(a *types0.App, sequence int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSnapshotsSupportedForVersion", a, sequence)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSnapshotsSupportedForVersion indicates an expected call of IsSnapshotsSupportedForVersion
func (mr *MockKOTSStoreMockRecorder) IsSnapshotsSupportedForVersion(a, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSnapshotsSupportedForVersion", reflect.TypeOf((*MockKOTSStore)(nil).IsSnapshotsSupportedForVersion), a, sequence)
}

// GetAppVersionArchive mocks base method
func (m *MockKOTSStore) GetAppVersionArchive(appID string, sequence int64, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppVersionArchive", appID, sequence, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAppVersionArchive indicates an expected call of GetAppVersionArchive
func (mr *MockKOTSStoreMockRecorder) GetAppVersionArchive(appID, sequence, dstPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppVersionArchive", reflect.TypeOf((*MockKOTSStore)(nil).GetAppVersionArchive), appID, sequence, dstPath)
}

// CreateAppVersionArchive mocks base method
func (m *MockKOTSStore) CreateAppVersionArchive(appID string, sequence int64, archivePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppVersionArchive", appID, sequence, archivePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppVersionArchive indicates an expected call of CreateAppVersionArchive
func (mr *MockKOTSStoreMockRecorder) CreateAppVersionArchive(appID, sequence, archivePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppVersionArchive", reflect.TypeOf((*MockKOTSStore)(nil).CreateAppVersionArchive), appID, sequence, archivePath)
}

// CreateAppVersion mocks base method
func (m *MockKOTSStore) CreateAppVersion(appID string, currentSequence *int64, appName, appIcon string, kotsKinds *kotsutil.KotsKinds, filesInDir string, gitops types3.DownstreamGitOps, source string, skipPreflights bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppVersion", appID, currentSequence, appName, appIcon, kotsKinds, filesInDir, gitops, source, skipPreflights)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppVersion indicates an expected call of CreateAppVersion
func (mr *MockKOTSStoreMockRecorder) CreateAppVersion(appID, currentSequence, appName, appIcon, kotsKinds, filesInDir, gitops, source, skipPreflights interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppVersion", reflect.TypeOf((*MockKOTSStore)(nil).CreateAppVersion), appID, currentSequence, appName, appIcon, kotsKinds, filesInDir, gitops, source, skipPreflights)
}

// GetAppVersion mocks base method
func (m *MockKOTSStore) GetAppVersion(arg0 string, arg1 int64) (*types11.AppVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppVersion", arg0, arg1)
	ret0, _ := ret[0].(*types11.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppVersion indicates an expected call of GetAppVersion
func (mr *MockKOTSStoreMockRecorder) GetAppVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppVersion", reflect.TypeOf((*MockKOTSStore)(nil).GetAppVersion), arg0, arg1)
}

// GetAppVersionsAfter mocks base method
func (m *MockKOTSStore) GetAppVersionsAfter(arg0 string, arg1 int64) ([]*types11.AppVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppVersionsAfter", arg0, arg1)
	ret0, _ := ret[0].([]*types11.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppVersionsAfter indicates an expected call of GetAppVersionsAfter
func (mr *MockKOTSStoreMockRecorder) GetAppVersionsAfter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppVersionsAfter", reflect.TypeOf((*MockKOTSStore)(nil).GetAppVersionsAfter), arg0, arg1)
}

// GetLatestLicenseForApp mocks base method
func (m *MockKOTSStore) GetLatestLicenseForApp(appID string) (*v1beta1.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestLicenseForApp", appID)
	ret0, _ := ret[0].(*v1beta1.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestLicenseForApp indicates an expected call of GetLatestLicenseForApp
func (mr *MockKOTSStoreMockRecorder) GetLatestLicenseForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestLicenseForApp", reflect.TypeOf((*MockKOTSStore)(nil).GetLatestLicenseForApp), appID)
}

// GetLicenseForAppVersion mocks base method
func (m *MockKOTSStore) GetLicenseForAppVersion(appID string, sequence int64) (*v1beta1.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseForAppVersion", appID, sequence)
	ret0, _ := ret[0].(*v1beta1.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseForAppVersion indicates an expected call of GetLicenseForAppVersion
func (mr *MockKOTSStoreMockRecorder) GetLicenseForAppVersion(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseForAppVersion", reflect.TypeOf((*MockKOTSStore)(nil).GetLicenseForAppVersion), appID, sequence)
}

// GetAllAppLicenses mocks base method
func (m *MockKOTSStore) GetAllAppLicenses() ([]*v1beta1.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAppLicenses")
	ret0, _ := ret[0].([]*v1beta1.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAppLicenses indicates an expected call of GetAllAppLicenses
func (mr *MockKOTSStoreMockRecorder) GetAllAppLicenses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAppLicenses", reflect.TypeOf((*MockKOTSStore)(nil).GetAllAppLicenses))
}

// ListClusters mocks base method
func (m *MockKOTSStore) ListClusters() ([]*types2.Downstream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters")
	ret0, _ := ret[0].([]*types2.Downstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters
func (mr *MockKOTSStoreMockRecorder) ListClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockKOTSStore)(nil).ListClusters))
}

// GetClusterIDFromSlug mocks base method
func (m *MockKOTSStore) GetClusterIDFromSlug(slug string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterIDFromSlug", slug)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterIDFromSlug indicates an expected call of GetClusterIDFromSlug
func (mr *MockKOTSStoreMockRecorder) GetClusterIDFromSlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterIDFromSlug", reflect.TypeOf((*MockKOTSStore)(nil).GetClusterIDFromSlug), slug)
}

// GetClusterIDFromDeployToken mocks base method
func (m *MockKOTSStore) GetClusterIDFromDeployToken(deployToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterIDFromDeployToken", deployToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterIDFromDeployToken indicates an expected call of GetClusterIDFromDeployToken
func (mr *MockKOTSStoreMockRecorder) GetClusterIDFromDeployToken(deployToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterIDFromDeployToken", reflect.TypeOf((*MockKOTSStore)(nil).GetClusterIDFromDeployToken), deployToken)
}

// CreateNewCluster mocks base method
func (m *MockKOTSStore) CreateNewCluster(userID string, isAllUsers bool, title, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCluster", userID, isAllUsers, title, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewCluster indicates an expected call of CreateNewCluster
func (mr *MockKOTSStoreMockRecorder) CreateNewCluster(userID, isAllUsers, title, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCluster", reflect.TypeOf((*MockKOTSStore)(nil).CreateNewCluster), userID, isAllUsers, title, token)
}

// SetInstanceSnapshotTTL mocks base method
func (m *MockKOTSStore) SetInstanceSnapshotTTL(clusterID, snapshotTTL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceSnapshotTTL", clusterID, snapshotTTL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceSnapshotTTL indicates an expected call of SetInstanceSnapshotTTL
func (mr *MockKOTSStoreMockRecorder) SetInstanceSnapshotTTL(clusterID, snapshotTTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceSnapshotTTL", reflect.TypeOf((*MockKOTSStore)(nil).SetInstanceSnapshotTTL), clusterID, snapshotTTL)
}

// SetInstanceSnapshotSchedule mocks base method
func (m *MockKOTSStore) SetInstanceSnapshotSchedule(clusterID, snapshotSchedule string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceSnapshotSchedule", clusterID, snapshotSchedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceSnapshotSchedule indicates an expected call of SetInstanceSnapshotSchedule
func (mr *MockKOTSStoreMockRecorder) SetInstanceSnapshotSchedule(clusterID, snapshotSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceSnapshotSchedule", reflect.TypeOf((*MockKOTSStore)(nil).SetInstanceSnapshotSchedule), clusterID, snapshotSchedule)
}

// ListPendingScheduledSnapshots mocks base method
func (m *MockKOTSStore) ListPendingScheduledSnapshots(appID string) ([]types8.ScheduledSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingScheduledSnapshots", appID)
	ret0, _ := ret[0].([]types8.ScheduledSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingScheduledSnapshots indicates an expected call of ListPendingScheduledSnapshots
func (mr *MockKOTSStoreMockRecorder) ListPendingScheduledSnapshots(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingScheduledSnapshots", reflect.TypeOf((*MockKOTSStore)(nil).ListPendingScheduledSnapshots), appID)
}

// UpdateScheduledSnapshot mocks base method
func (m *MockKOTSStore) UpdateScheduledSnapshot(snapshotID, backupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduledSnapshot", snapshotID, backupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScheduledSnapshot indicates an expected call of UpdateScheduledSnapshot
func (mr *MockKOTSStoreMockRecorder) UpdateScheduledSnapshot(snapshotID, backupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduledSnapshot", reflect.TypeOf((*MockKOTSStore)(nil).UpdateScheduledSnapshot), snapshotID, backupName)
}

// DeletePendingScheduledSnapshots mocks base method
func (m *MockKOTSStore) DeletePendingScheduledSnapshots(appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingScheduledSnapshots", appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePendingScheduledSnapshots indicates an expected call of DeletePendingScheduledSnapshots
func (mr *MockKOTSStoreMockRecorder) DeletePendingScheduledSnapshots(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingScheduledSnapshots", reflect.TypeOf((*MockKOTSStore)(nil).DeletePendingScheduledSnapshots), appID)
}

// CreateScheduledSnapshot mocks base method
func (m *MockKOTSStore) CreateScheduledSnapshot(snapshotID, appID string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduledSnapshot", snapshotID, appID, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateScheduledSnapshot indicates an expected call of CreateScheduledSnapshot
func (mr *MockKOTSStoreMockRecorder) CreateScheduledSnapshot(snapshotID, appID, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduledSnapshot", reflect.TypeOf((*MockKOTSStore)(nil).CreateScheduledSnapshot), snapshotID, appID, timestamp)
}

// ListPendingScheduledInstanceSnapshots mocks base method
func (m *MockKOTSStore) ListPendingScheduledInstanceSnapshots(clusterID string) ([]types8.ScheduledInstanceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingScheduledInstanceSnapshots", clusterID)
	ret0, _ := ret[0].([]types8.ScheduledInstanceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingScheduledInstanceSnapshots indicates an expected call of ListPendingScheduledInstanceSnapshots
func (mr *MockKOTSStoreMockRecorder) ListPendingScheduledInstanceSnapshots(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingScheduledInstanceSnapshots", reflect.TypeOf((*MockKOTSStore)(nil).ListPendingScheduledInstanceSnapshots), clusterID)
}

// UpdateScheduledInstanceSnapshot mocks base method
func (m *MockKOTSStore) UpdateScheduledInstanceSnapshot(snapshotID, backupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduledInstanceSnapshot", snapshotID, backupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScheduledInstanceSnapshot indicates an expected call of UpdateScheduledInstanceSnapshot
func (mr *MockKOTSStoreMockRecorder) UpdateScheduledInstanceSnapshot(snapshotID, backupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduledInstanceSnapshot", reflect.TypeOf((*MockKOTSStore)(nil).UpdateScheduledInstanceSnapshot), snapshotID, backupName)
}

// DeletePendingScheduledInstanceSnapshots mocks base method
func (m *MockKOTSStore) DeletePendingScheduledInstanceSnapshots(clusterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingScheduledInstanceSnapshots", clusterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePendingScheduledInstanceSnapshots indicates an expected call of DeletePendingScheduledInstanceSnapshots
func (mr *MockKOTSStoreMockRecorder) DeletePendingScheduledInstanceSnapshots(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingScheduledInstanceSnapshots", reflect.TypeOf((*MockKOTSStore)(nil).DeletePendingScheduledInstanceSnapshots), clusterID)
}

// CreateScheduledInstanceSnapshot mocks base method
func (m *MockKOTSStore) CreateScheduledInstanceSnapshot(snapshotID, clusterID string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduledInstanceSnapshot", snapshotID, clusterID, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateScheduledInstanceSnapshot indicates an expected call of CreateScheduledInstanceSnapshot
func (mr *MockKOTSStoreMockRecorder) CreateScheduledInstanceSnapshot(snapshotID, clusterID, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduledInstanceSnapshot", reflect.TypeOf((*MockKOTSStore)(nil).CreateScheduledInstanceSnapshot), snapshotID, clusterID, timestamp)
}

// GetPendingInstallationStatus mocks base method
func (m *MockKOTSStore) GetPendingInstallationStatus() (*types4.InstallStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingInstallationStatus")
	ret0, _ := ret[0].(*types4.InstallStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingInstallationStatus indicates an expected call of GetPendingInstallationStatus
func (mr *MockKOTSStoreMockRecorder) GetPendingInstallationStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingInstallationStatus", reflect.TypeOf((*MockKOTSStore)(nil).GetPendingInstallationStatus))
}

// Init mocks base method
func (m *MockKOTSStore) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockKOTSStoreMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockKOTSStore)(nil).Init))
}

// WaitForReady mocks base method
func (m *MockKOTSStore) WaitForReady(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForReady", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForReady indicates an expected call of WaitForReady
func (mr *MockKOTSStoreMockRecorder) WaitForReady(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForReady", reflect.TypeOf((*MockKOTSStore)(nil).WaitForReady), ctx)
}

// IsNotFound mocks base method
func (m *MockKOTSStore) IsNotFound(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFound", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFound indicates an expected call of IsNotFound
func (mr *MockKOTSStoreMockRecorder) IsNotFound(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFound", reflect.TypeOf((*MockKOTSStore)(nil).IsNotFound), err)
}

// MockMigrations is a mock of Migrations interface
type MockMigrations struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationsMockRecorder
}

// MockMigrationsMockRecorder is the mock recorder for MockMigrations
type MockMigrationsMockRecorder struct {
	mock *MockMigrations
}

// NewMockMigrations creates a new mock instance
func NewMockMigrations(ctrl *gomock.Controller) *MockMigrations {
	mock := &MockMigrations{ctrl: ctrl}
	mock.recorder = &MockMigrationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMigrations) EXPECT() *MockMigrationsMockRecorder {
	return m.recorder
}

// RunMigrations mocks base method
func (m *MockMigrations) RunMigrations() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunMigrations")
}

// RunMigrations indicates an expected call of RunMigrations
func (mr *MockMigrationsMockRecorder) RunMigrations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMigrations", reflect.TypeOf((*MockMigrations)(nil).RunMigrations))
}

// MockRegistryStore is a mock of RegistryStore interface
type MockRegistryStore struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryStoreMockRecorder
}

// MockRegistryStoreMockRecorder is the mock recorder for MockRegistryStore
type MockRegistryStoreMockRecorder struct {
	mock *MockRegistryStore
}

// NewMockRegistryStore creates a new mock instance
func NewMockRegistryStore(ctrl *gomock.Controller) *MockRegistryStore {
	mock := &MockRegistryStore{ctrl: ctrl}
	mock.recorder = &MockRegistryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistryStore) EXPECT() *MockRegistryStoreMockRecorder {
	return m.recorder
}

// GetRegistryDetailsForApp mocks base method
func (m *MockRegistryStore) GetRegistryDetailsForApp(appID string) (*types6.RegistrySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryDetailsForApp", appID)
	ret0, _ := ret[0].(*types6.RegistrySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistryDetailsForApp indicates an expected call of GetRegistryDetailsForApp
func (mr *MockRegistryStoreMockRecorder) GetRegistryDetailsForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryDetailsForApp", reflect.TypeOf((*MockRegistryStore)(nil).GetRegistryDetailsForApp), appID)
}

// UpdateRegistry mocks base method
func (m *MockRegistryStore) UpdateRegistry(appID, hostname, username, password, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistry", appID, hostname, username, password, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRegistry indicates an expected call of UpdateRegistry
func (mr *MockRegistryStoreMockRecorder) UpdateRegistry(appID, hostname, username, password, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistry", reflect.TypeOf((*MockRegistryStore)(nil).UpdateRegistry), appID, hostname, username, password, namespace)
}

// MockSupportBundleStore is a mock of SupportBundleStore interface
type MockSupportBundleStore struct {
	ctrl     *gomock.Controller
	recorder *MockSupportBundleStoreMockRecorder
}

// MockSupportBundleStoreMockRecorder is the mock recorder for MockSupportBundleStore
type MockSupportBundleStoreMockRecorder struct {
	mock *MockSupportBundleStore
}

// NewMockSupportBundleStore creates a new mock instance
func NewMockSupportBundleStore(ctrl *gomock.Controller) *MockSupportBundleStore {
	mock := &MockSupportBundleStore{ctrl: ctrl}
	mock.recorder = &MockSupportBundleStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSupportBundleStore) EXPECT() *MockSupportBundleStoreMockRecorder {
	return m.recorder
}

// ListSupportBundles mocks base method
func (m *MockSupportBundleStore) ListSupportBundles(appID string) ([]*types9.SupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportBundles", appID)
	ret0, _ := ret[0].([]*types9.SupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSupportBundles indicates an expected call of ListSupportBundles
func (mr *MockSupportBundleStoreMockRecorder) ListSupportBundles(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportBundles", reflect.TypeOf((*MockSupportBundleStore)(nil).ListSupportBundles), appID)
}

// ListPendingSupportBundlesForApp mocks base method
func (m *MockSupportBundleStore) ListPendingSupportBundlesForApp(appID string) ([]*types9.PendingSupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingSupportBundlesForApp", appID)
	ret0, _ := ret[0].([]*types9.PendingSupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingSupportBundlesForApp indicates an expected call of ListPendingSupportBundlesForApp
func (mr *MockSupportBundleStoreMockRecorder) ListPendingSupportBundlesForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingSupportBundlesForApp", reflect.TypeOf((*MockSupportBundleStore)(nil).ListPendingSupportBundlesForApp), appID)
}

// GetSupportBundleFromSlug mocks base method
func (m *MockSupportBundleStore) GetSupportBundleFromSlug(slug string) (*types9.SupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundleFromSlug", slug)
	ret0, _ := ret[0].(*types9.SupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundleFromSlug indicates an expected call of GetSupportBundleFromSlug
func (mr *MockSupportBundleStoreMockRecorder) GetSupportBundleFromSlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundleFromSlug", reflect.TypeOf((*MockSupportBundleStore)(nil).GetSupportBundleFromSlug), slug)
}

// GetSupportBundle mocks base method
func (m *MockSupportBundleStore) GetSupportBundle(bundleID string) (*types9.SupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundle", bundleID)
	ret0, _ := ret[0].(*types9.SupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundle indicates an expected call of GetSupportBundle
func (mr *MockSupportBundleStoreMockRecorder) GetSupportBundle(bundleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundle", reflect.TypeOf((*MockSupportBundleStore)(nil).GetSupportBundle), bundleID)
}

// CreatePendingSupportBundle mocks base method
func (m *MockSupportBundleStore) CreatePendingSupportBundle(bundleID, appID, clusterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePendingSupportBundle", bundleID, appID, clusterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePendingSupportBundle indicates an expected call of CreatePendingSupportBundle
func (mr *MockSupportBundleStoreMockRecorder) CreatePendingSupportBundle(bundleID, appID, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePendingSupportBundle", reflect.TypeOf((*MockSupportBundleStore)(nil).CreatePendingSupportBundle), bundleID, appID, clusterID)
}

// CreateSupportBundle mocks base method
func (m *MockSupportBundleStore) CreateSupportBundle(bundleID, appID, archivePath string, marshalledTree []byte) (*types9.SupportBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupportBundle", bundleID, appID, archivePath, marshalledTree)
	ret0, _ := ret[0].(*types9.SupportBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSupportBundle indicates an expected call of CreateSupportBundle
func (mr *MockSupportBundleStoreMockRecorder) CreateSupportBundle(bundleID, appID, archivePath, marshalledTree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupportBundle", reflect.TypeOf((*MockSupportBundleStore)(nil).CreateSupportBundle), bundleID, appID, archivePath, marshalledTree)
}

// GetSupportBundleArchive mocks base method
func (m *MockSupportBundleStore) GetSupportBundleArchive(bundleID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundleArchive", bundleID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundleArchive indicates an expected call of GetSupportBundleArchive
func (mr *MockSupportBundleStoreMockRecorder) GetSupportBundleArchive(bundleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundleArchive", reflect.TypeOf((*MockSupportBundleStore)(nil).GetSupportBundleArchive), bundleID)
}

// GetSupportBundleAnalysis mocks base method
func (m *MockSupportBundleStore) GetSupportBundleAnalysis(bundleID string) (*types9.SupportBundleAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundleAnalysis", bundleID)
	ret0, _ := ret[0].(*types9.SupportBundleAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundleAnalysis indicates an expected call of GetSupportBundleAnalysis
func (mr *MockSupportBundleStoreMockRecorder) GetSupportBundleAnalysis(bundleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundleAnalysis", reflect.TypeOf((*MockSupportBundleStore)(nil).GetSupportBundleAnalysis), bundleID)
}

// SetSupportBundleAnalysis mocks base method
func (m *MockSupportBundleStore) SetSupportBundleAnalysis(bundleID string, insights []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSupportBundleAnalysis", bundleID, insights)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSupportBundleAnalysis indicates an expected call of SetSupportBundleAnalysis
func (mr *MockSupportBundleStoreMockRecorder) SetSupportBundleAnalysis(bundleID, insights interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSupportBundleAnalysis", reflect.TypeOf((*MockSupportBundleStore)(nil).SetSupportBundleAnalysis), bundleID, insights)
}

// GetRedactions mocks base method
func (m *MockSupportBundleStore) GetRedactions(bundleID string) (redact.RedactionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedactions", bundleID)
	ret0, _ := ret[0].(redact.RedactionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedactions indicates an expected call of GetRedactions
func (mr *MockSupportBundleStoreMockRecorder) GetRedactions(bundleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedactions", reflect.TypeOf((*MockSupportBundleStore)(nil).GetRedactions), bundleID)
}

// SetRedactions mocks base method
func (m *MockSupportBundleStore) SetRedactions(bundleID string, redacts redact.RedactionList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRedactions", bundleID, redacts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRedactions indicates an expected call of SetRedactions
func (mr *MockSupportBundleStoreMockRecorder) SetRedactions(bundleID, redacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedactions", reflect.TypeOf((*MockSupportBundleStore)(nil).SetRedactions), bundleID, redacts)
}

// GetSupportBundleSpecForApp mocks base method
func (m *MockSupportBundleStore) GetSupportBundleSpecForApp(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportBundleSpecForApp", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportBundleSpecForApp indicates an expected call of GetSupportBundleSpecForApp
func (mr *MockSupportBundleStoreMockRecorder) GetSupportBundleSpecForApp(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportBundleSpecForApp", reflect.TypeOf((*MockSupportBundleStore)(nil).GetSupportBundleSpecForApp), id)
}

// MockPreflightStore is a mock of PreflightStore interface
type MockPreflightStore struct {
	ctrl     *gomock.Controller
	recorder *MockPreflightStoreMockRecorder
}

// MockPreflightStoreMockRecorder is the mock recorder for MockPreflightStore
type MockPreflightStoreMockRecorder struct {
	mock *MockPreflightStore
}

// NewMockPreflightStore creates a new mock instance
func NewMockPreflightStore(ctrl *gomock.Controller) *MockPreflightStore {
	mock := &MockPreflightStore{ctrl: ctrl}
	mock.recorder = &MockPreflightStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPreflightStore) EXPECT() *MockPreflightStoreMockRecorder {
	return m.recorder
}

// SetPreflightResults mocks base method
func (m *MockPreflightStore) SetPreflightResults(appID string, sequence int64, results []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPreflightResults", appID, sequence, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPreflightResults indicates an expected call of SetPreflightResults
func (mr *MockPreflightStoreMockRecorder) SetPreflightResults(appID, sequence, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreflightResults", reflect.TypeOf((*MockPreflightStore)(nil).SetPreflightResults), appID, sequence, results)
}

// GetPreflightResults mocks base method
func (m *MockPreflightStore) GetPreflightResults(appID string, sequence int64) (*types5.PreflightResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreflightResults", appID, sequence)
	ret0, _ := ret[0].(*types5.PreflightResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreflightResults indicates an expected call of GetPreflightResults
func (mr *MockPreflightStoreMockRecorder) GetPreflightResults(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreflightResults", reflect.TypeOf((*MockPreflightStore)(nil).GetPreflightResults), appID, sequence)
}

// GetLatestPreflightResultsForSequenceZero mocks base method
func (m *MockPreflightStore) GetLatestPreflightResultsForSequenceZero() (*types5.PreflightResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPreflightResultsForSequenceZero")
	ret0, _ := ret[0].(*types5.PreflightResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPreflightResultsForSequenceZero indicates an expected call of GetLatestPreflightResultsForSequenceZero
func (mr *MockPreflightStoreMockRecorder) GetLatestPreflightResultsForSequenceZero() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPreflightResultsForSequenceZero", reflect.TypeOf((*MockPreflightStore)(nil).GetLatestPreflightResultsForSequenceZero))
}

// ResetPreflightResults mocks base method
func (m *MockPreflightStore) ResetPreflightResults(appID string, sequence int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPreflightResults", appID, sequence)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPreflightResults indicates an expected call of ResetPreflightResults
func (mr *MockPreflightStoreMockRecorder) ResetPreflightResults(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPreflightResults", reflect.TypeOf((*MockPreflightStore)(nil).ResetPreflightResults), appID, sequence)
}

// SetIgnorePreflightPermissionErrors mocks base method
func (m *MockPreflightStore) SetIgnorePreflightPermissionErrors(appID string, sequence int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIgnorePreflightPermissionErrors", appID, sequence)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIgnorePreflightPermissionErrors indicates an expected call of SetIgnorePreflightPermissionErrors
func (mr *MockPreflightStoreMockRecorder) SetIgnorePreflightPermissionErrors(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIgnorePreflightPermissionErrors", reflect.TypeOf((*MockPreflightStore)(nil).SetIgnorePreflightPermissionErrors), appID, sequence)
}

// MockPrometheusStore is a mock of PrometheusStore interface
type MockPrometheusStore struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusStoreMockRecorder
}

// MockPrometheusStoreMockRecorder is the mock recorder for MockPrometheusStore
type MockPrometheusStoreMockRecorder struct {
	mock *MockPrometheusStore
}

// NewMockPrometheusStore creates a new mock instance
func NewMockPrometheusStore(ctrl *gomock.Controller) *MockPrometheusStore {
	mock := &MockPrometheusStore{ctrl: ctrl}
	mock.recorder = &MockPrometheusStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrometheusStore) EXPECT() *MockPrometheusStoreMockRecorder {
	return m.recorder
}

// GetPrometheusAddress mocks base method
func (m *MockPrometheusStore) GetPrometheusAddress() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrometheusAddress")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrometheusAddress indicates an expected call of GetPrometheusAddress
func (mr *MockPrometheusStoreMockRecorder) GetPrometheusAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrometheusAddress", reflect.TypeOf((*MockPrometheusStore)(nil).GetPrometheusAddress))
}

// SetPrometheusAddress mocks base method
func (m *MockPrometheusStore) SetPrometheusAddress(address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrometheusAddress", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrometheusAddress indicates an expected call of SetPrometheusAddress
func (mr *MockPrometheusStoreMockRecorder) SetPrometheusAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrometheusAddress", reflect.TypeOf((*MockPrometheusStore)(nil).SetPrometheusAddress), address)
}

// MockAirgapStore is a mock of AirgapStore interface
type MockAirgapStore struct {
	ctrl     *gomock.Controller
	recorder *MockAirgapStoreMockRecorder
}

// MockAirgapStoreMockRecorder is the mock recorder for MockAirgapStore
type MockAirgapStoreMockRecorder struct {
	mock *MockAirgapStore
}

// NewMockAirgapStore creates a new mock instance
func NewMockAirgapStore(ctrl *gomock.Controller) *MockAirgapStore {
	mock := &MockAirgapStore{ctrl: ctrl}
	mock.recorder = &MockAirgapStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAirgapStore) EXPECT() *MockAirgapStoreMockRecorder {
	return m.recorder
}

// GetPendingAirgapUploadApp mocks base method
func (m *MockAirgapStore) GetPendingAirgapUploadApp() (*types.PendingApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingAirgapUploadApp")
	ret0, _ := ret[0].(*types.PendingApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingAirgapUploadApp indicates an expected call of GetPendingAirgapUploadApp
func (mr *MockAirgapStoreMockRecorder) GetPendingAirgapUploadApp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingAirgapUploadApp", reflect.TypeOf((*MockAirgapStore)(nil).GetPendingAirgapUploadApp))
}

// GetAirgapInstallStatus mocks base method
func (m *MockAirgapStore) GetAirgapInstallStatus() (*types.InstallStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAirgapInstallStatus")
	ret0, _ := ret[0].(*types.InstallStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAirgapInstallStatus indicates an expected call of GetAirgapInstallStatus
func (mr *MockAirgapStoreMockRecorder) GetAirgapInstallStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAirgapInstallStatus", reflect.TypeOf((*MockAirgapStore)(nil).GetAirgapInstallStatus))
}

// ResetAirgapInstallInProgress mocks base method
func (m *MockAirgapStore) ResetAirgapInstallInProgress(appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAirgapInstallInProgress", appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAirgapInstallInProgress indicates an expected call of ResetAirgapInstallInProgress
func (mr *MockAirgapStoreMockRecorder) ResetAirgapInstallInProgress(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAirgapInstallInProgress", reflect.TypeOf((*MockAirgapStore)(nil).ResetAirgapInstallInProgress), appID)
}

// SetAppIsAirgap mocks base method
func (m *MockAirgapStore) SetAppIsAirgap(appID string, isAirgap bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppIsAirgap", appID, isAirgap)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppIsAirgap indicates an expected call of SetAppIsAirgap
func (mr *MockAirgapStoreMockRecorder) SetAppIsAirgap(appID, isAirgap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppIsAirgap", reflect.TypeOf((*MockAirgapStore)(nil).SetAppIsAirgap), appID, isAirgap)
}

// MockTaskStore is a mock of TaskStore interface
type MockTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStoreMockRecorder
}

// MockTaskStoreMockRecorder is the mock recorder for MockTaskStore
type MockTaskStoreMockRecorder struct {
	mock *MockTaskStore
}

// NewMockTaskStore creates a new mock instance
func NewMockTaskStore(ctrl *gomock.Controller) *MockTaskStore {
	mock := &MockTaskStore{ctrl: ctrl}
	mock.recorder = &MockTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskStore) EXPECT() *MockTaskStoreMockRecorder {
	return m.recorder
}

// SetTaskStatus mocks base method
func (m *MockTaskStore) SetTaskStatus(taskID, message, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskStatus", taskID, message, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTaskStatus indicates an expected call of SetTaskStatus
func (mr *MockTaskStoreMockRecorder) SetTaskStatus(taskID, message, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskStatus", reflect.TypeOf((*MockTaskStore)(nil).SetTaskStatus), taskID, message, status)
}

// UpdateTaskStatusTimestamp mocks base method
func (m *MockTaskStore) UpdateTaskStatusTimestamp(taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatusTimestamp", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatusTimestamp indicates an expected call of UpdateTaskStatusTimestamp
func (mr *MockTaskStoreMockRecorder) UpdateTaskStatusTimestamp(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatusTimestamp", reflect.TypeOf((*MockTaskStore)(nil).UpdateTaskStatusTimestamp), taskID)
}

// ClearTaskStatus mocks base method
func (m *MockTaskStore) ClearTaskStatus(taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearTaskStatus", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearTaskStatus indicates an expected call of ClearTaskStatus
func (mr *MockTaskStoreMockRecorder) ClearTaskStatus(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearTaskStatus", reflect.TypeOf((*MockTaskStore)(nil).ClearTaskStatus), taskID)
}

// GetTaskStatus mocks base method
func (m *MockTaskStore) GetTaskStatus(taskID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatus", taskID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTaskStatus indicates an expected call of GetTaskStatus
func (mr *MockTaskStoreMockRecorder) GetTaskStatus(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatus", reflect.TypeOf((*MockTaskStore)(nil).GetTaskStatus), taskID)
}

// MockSessionStore is a mock of SessionStore interface
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreMockRecorder
}

// MockSessionStoreMockRecorder is the mock recorder for MockSessionStore
type MockSessionStoreMockRecorder struct {
	mock *MockSessionStore
}

// NewMockSessionStore creates a new mock instance
func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &MockSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionStore) EXPECT() *MockSessionStoreMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *MockSessionStore) CreateSession(user *types10.User, issuedAt, expiresAt time.Time, roles []string) (*types7.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", user, issuedAt, expiresAt, roles)
	ret0, _ := ret[0].(*types7.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockSessionStoreMockRecorder) CreateSession(user, issuedAt, expiresAt, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionStore)(nil).CreateSession), user, issuedAt, expiresAt, roles)
}

// DeleteSession mocks base method
func (m *MockSessionStore) DeleteSession(sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockSessionStoreMockRecorder) DeleteSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionStore)(nil).DeleteSession), sessionID)
}

// GetSession mocks base method
func (m *MockSessionStore) GetSession(sessionID string) (*types7.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(*types7.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession
func (mr *MockSessionStoreMockRecorder) GetSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionStore)(nil).GetSession), sessionID)
}

// MockAppStatusStore is a mock of AppStatusStore interface
type MockAppStatusStore struct {
	ctrl     *gomock.Controller
	recorder *MockAppStatusStoreMockRecorder
}

// MockAppStatusStoreMockRecorder is the mock recorder for MockAppStatusStore
type MockAppStatusStoreMockRecorder struct {
	mock *MockAppStatusStore
}

// NewMockAppStatusStore creates a new mock instance
func NewMockAppStatusStore(ctrl *gomock.Controller) *MockAppStatusStore {
	mock := &MockAppStatusStore{ctrl: ctrl}
	mock.recorder = &MockAppStatusStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppStatusStore) EXPECT() *MockAppStatusStoreMockRecorder {
	return m.recorder
}

// GetAppStatus mocks base method
func (m *MockAppStatusStore) GetAppStatus(appID string) (*types1.AppStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStatus", appID)
	ret0, _ := ret[0].(*types1.AppStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppStatus indicates an expected call of GetAppStatus
func (mr *MockAppStatusStoreMockRecorder) GetAppStatus(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStatus", reflect.TypeOf((*MockAppStatusStore)(nil).GetAppStatus), appID)
}

// MockAppStore is a mock of AppStore interface
type MockAppStore struct {
	ctrl     *gomock.Controller
	recorder *MockAppStoreMockRecorder
}

// MockAppStoreMockRecorder is the mock recorder for MockAppStore
type MockAppStoreMockRecorder struct {
	mock *MockAppStore
}

// NewMockAppStore creates a new mock instance
func NewMockAppStore(ctrl *gomock.Controller) *MockAppStore {
	mock := &MockAppStore{ctrl: ctrl}
	mock.recorder = &MockAppStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppStore) EXPECT() *MockAppStoreMockRecorder {
	return m.recorder
}

// AddAppToAllDownstreams mocks base method
func (m *MockAppStore) AddAppToAllDownstreams(appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAppToAllDownstreams", appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAppToAllDownstreams indicates an expected call of AddAppToAllDownstreams
func (mr *MockAppStoreMockRecorder) AddAppToAllDownstreams(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppToAllDownstreams", reflect.TypeOf((*MockAppStore)(nil).AddAppToAllDownstreams), appID)
}

// SetAppInstallState mocks base method
func (m *MockAppStore) SetAppInstallState(appID, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppInstallState", appID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppInstallState indicates an expected call of SetAppInstallState
func (mr *MockAppStoreMockRecorder) SetAppInstallState(appID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppInstallState", reflect.TypeOf((*MockAppStore)(nil).SetAppInstallState), appID, state)
}

// ListInstalledApps mocks base method
func (m *MockAppStore) ListInstalledApps() ([]*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstalledApps")
	ret0, _ := ret[0].([]*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstalledApps indicates an expected call of ListInstalledApps
func (mr *MockAppStoreMockRecorder) ListInstalledApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstalledApps", reflect.TypeOf((*MockAppStore)(nil).ListInstalledApps))
}

// ListInstalledAppSlugs mocks base method
func (m *MockAppStore) ListInstalledAppSlugs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstalledAppSlugs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstalledAppSlugs indicates an expected call of ListInstalledAppSlugs
func (mr *MockAppStoreMockRecorder) ListInstalledAppSlugs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstalledAppSlugs", reflect.TypeOf((*MockAppStore)(nil).ListInstalledAppSlugs))
}

// GetAppIDFromSlug mocks base method
func (m *MockAppStore) GetAppIDFromSlug(slug string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppIDFromSlug", slug)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppIDFromSlug indicates an expected call of GetAppIDFromSlug
func (mr *MockAppStoreMockRecorder) GetAppIDFromSlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppIDFromSlug", reflect.TypeOf((*MockAppStore)(nil).GetAppIDFromSlug), slug)
}

// GetApp mocks base method
func (m *MockAppStore) GetApp(appID string) (*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", appID)
	ret0, _ := ret[0].(*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp
func (mr *MockAppStoreMockRecorder) GetApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockAppStore)(nil).GetApp), appID)
}

// GetAppFromSlug mocks base method
func (m *MockAppStore) GetAppFromSlug(slug string) (*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppFromSlug", slug)
	ret0, _ := ret[0].(*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppFromSlug indicates an expected call of GetAppFromSlug
func (mr *MockAppStoreMockRecorder) GetAppFromSlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppFromSlug", reflect.TypeOf((*MockAppStore)(nil).GetAppFromSlug), slug)
}

// CreateApp mocks base method
func (m *MockAppStore) CreateApp(name, upstreamURI, licenseData string, isAirgapEnabled, skipImagePush bool) (*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", name, upstreamURI, licenseData, isAirgapEnabled, skipImagePush)
	ret0, _ := ret[0].(*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp
func (mr *MockAppStoreMockRecorder) CreateApp(name, upstreamURI, licenseData, isAirgapEnabled, skipImagePush interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockAppStore)(nil).CreateApp), name, upstreamURI, licenseData, isAirgapEnabled, skipImagePush)
}

// ListDownstreamsForApp mocks base method
func (m *MockAppStore) ListDownstreamsForApp(appID string) ([]types2.Downstream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownstreamsForApp", appID)
	ret0, _ := ret[0].([]types2.Downstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDownstreamsForApp indicates an expected call of ListDownstreamsForApp
func (mr *MockAppStoreMockRecorder) ListDownstreamsForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownstreamsForApp", reflect.TypeOf((*MockAppStore)(nil).ListDownstreamsForApp), appID)
}

// ListAppsForDownstream mocks base method
func (m *MockAppStore) ListAppsForDownstream(clusterID string) ([]*types0.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsForDownstream", clusterID)
	ret0, _ := ret[0].([]*types0.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppsForDownstream indicates an expected call of ListAppsForDownstream
func (mr *MockAppStoreMockRecorder) ListAppsForDownstream(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsForDownstream", reflect.TypeOf((*MockAppStore)(nil).ListAppsForDownstream), clusterID)
}

// GetDownstream mocks base method
func (m *MockAppStore) GetDownstream(clusterID string) (*types2.Downstream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownstream", clusterID)
	ret0, _ := ret[0].(*types2.Downstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownstream indicates an expected call of GetDownstream
func (mr *MockAppStoreMockRecorder) GetDownstream(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownstream", reflect.TypeOf((*MockAppStore)(nil).GetDownstream), clusterID)
}

// IsGitOpsEnabledForApp mocks base method
func (m *MockAppStore) IsGitOpsEnabledForApp(appID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGitOpsEnabledForApp", appID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsGitOpsEnabledForApp indicates an expected call of IsGitOpsEnabledForApp
func (mr *MockAppStoreMockRecorder) IsGitOpsEnabledForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGitOpsEnabledForApp", reflect.TypeOf((*MockAppStore)(nil).IsGitOpsEnabledForApp), appID)
}

// SetUpdateCheckerSpec mocks base method
func (m *MockAppStore) SetUpdateCheckerSpec(appID, updateCheckerSpec string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpdateCheckerSpec", appID, updateCheckerSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpdateCheckerSpec indicates an expected call of SetUpdateCheckerSpec
func (mr *MockAppStoreMockRecorder) SetUpdateCheckerSpec(appID, updateCheckerSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdateCheckerSpec", reflect.TypeOf((*MockAppStore)(nil).SetUpdateCheckerSpec), appID, updateCheckerSpec)
}

// SetSnapshotTTL mocks base method
func (m *MockAppStore) SetSnapshotTTL(appID, snapshotTTL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnapshotTTL", appID, snapshotTTL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSnapshotTTL indicates an expected call of SetSnapshotTTL
func (mr *MockAppStoreMockRecorder) SetSnapshotTTL(appID, snapshotTTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotTTL", reflect.TypeOf((*MockAppStore)(nil).SetSnapshotTTL), appID, snapshotTTL)
}

// SetSnapshotSchedule mocks base method
func (m *MockAppStore) SetSnapshotSchedule(appID, snapshotSchedule string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnapshotSchedule", appID, snapshotSchedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSnapshotSchedule indicates an expected call of SetSnapshotSchedule
func (mr *MockAppStoreMockRecorder) SetSnapshotSchedule(appID, snapshotSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotSchedule", reflect.TypeOf((*MockAppStore)(nil).SetSnapshotSchedule), appID, snapshotSchedule)
}

// RemoveApp mocks base method
func (m *MockAppStore) RemoveApp(appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveApp", appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveApp indicates an expected call of RemoveApp
func (mr *MockAppStoreMockRecorder) RemoveApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveApp", reflect.TypeOf((*MockAppStore)(nil).RemoveApp), appID)
}

// MockSnapshotStore is a mock of SnapshotStore interface
type MockSnapshotStore struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotStoreMockRecorder
}

// MockSnapshotStoreMockRecorder is the mock recorder for MockSnapshotStore
type MockSnapshotStoreMockRecorder struct {
	mock *MockSnapshotStore
}

// NewMockSnapshotStore creates a new mock instance
func NewMockSnapshotStore(ctrl *gomock.Controller) *MockSnapshotStore {
	mock := &MockSnapshotStore{ctrl: ctrl}
	mock.recorder = &MockSnapshotStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshotStore) EXPECT() *MockSnapshotStoreMockRecorder {
	return m.recorder
}

// ListPendingScheduledSnapshots mocks base method
func (m *MockSnapshotStore) ListPendingScheduledSnapshots(appID string) ([]types8.ScheduledSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingScheduledSnapshots", appID)
	ret0, _ := ret[0].([]types8.ScheduledSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingScheduledSnapshots indicates an expected call of ListPendingScheduledSnapshots
func (mr *MockSnapshotStoreMockRecorder) ListPendingScheduledSnapshots(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingScheduledSnapshots", reflect.TypeOf((*MockSnapshotStore)(nil).ListPendingScheduledSnapshots), appID)
}

// UpdateScheduledSnapshot mocks base method
func (m *MockSnapshotStore) UpdateScheduledSnapshot(snapshotID, backupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduledSnapshot", snapshotID, backupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScheduledSnapshot indicates an expected call of UpdateScheduledSnapshot
func (mr *MockSnapshotStoreMockRecorder) UpdateScheduledSnapshot(snapshotID, backupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduledSnapshot", reflect.TypeOf((*MockSnapshotStore)(nil).UpdateScheduledSnapshot), snapshotID, backupName)
}

// DeletePendingScheduledSnapshots mocks base method
func (m *MockSnapshotStore) DeletePendingScheduledSnapshots(appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingScheduledSnapshots", appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePendingScheduledSnapshots indicates an expected call of DeletePendingScheduledSnapshots
func (mr *MockSnapshotStoreMockRecorder) DeletePendingScheduledSnapshots(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingScheduledSnapshots", reflect.TypeOf((*MockSnapshotStore)(nil).DeletePendingScheduledSnapshots), appID)
}

// CreateScheduledSnapshot mocks base method
func (m *MockSnapshotStore) CreateScheduledSnapshot(snapshotID, appID string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduledSnapshot", snapshotID, appID, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateScheduledSnapshot indicates an expected call of CreateScheduledSnapshot
func (mr *MockSnapshotStoreMockRecorder) CreateScheduledSnapshot(snapshotID, appID, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduledSnapshot", reflect.TypeOf((*MockSnapshotStore)(nil).CreateScheduledSnapshot), snapshotID, appID, timestamp)
}

// ListPendingScheduledInstanceSnapshots mocks base method
func (m *MockSnapshotStore) ListPendingScheduledInstanceSnapshots(clusterID string) ([]types8.ScheduledInstanceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingScheduledInstanceSnapshots", clusterID)
	ret0, _ := ret[0].([]types8.ScheduledInstanceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingScheduledInstanceSnapshots indicates an expected call of ListPendingScheduledInstanceSnapshots
func (mr *MockSnapshotStoreMockRecorder) ListPendingScheduledInstanceSnapshots(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingScheduledInstanceSnapshots", reflect.TypeOf((*MockSnapshotStore)(nil).ListPendingScheduledInstanceSnapshots), clusterID)
}

// UpdateScheduledInstanceSnapshot mocks base method
func (m *MockSnapshotStore) UpdateScheduledInstanceSnapshot(snapshotID, backupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduledInstanceSnapshot", snapshotID, backupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScheduledInstanceSnapshot indicates an expected call of UpdateScheduledInstanceSnapshot
func (mr *MockSnapshotStoreMockRecorder) UpdateScheduledInstanceSnapshot(snapshotID, backupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduledInstanceSnapshot", reflect.TypeOf((*MockSnapshotStore)(nil).UpdateScheduledInstanceSnapshot), snapshotID, backupName)
}

// DeletePendingScheduledInstanceSnapshots mocks base method
func (m *MockSnapshotStore) DeletePendingScheduledInstanceSnapshots(clusterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingScheduledInstanceSnapshots", clusterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePendingScheduledInstanceSnapshots indicates an expected call of DeletePendingScheduledInstanceSnapshots
func (mr *MockSnapshotStoreMockRecorder) DeletePendingScheduledInstanceSnapshots(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingScheduledInstanceSnapshots", reflect.TypeOf((*MockSnapshotStore)(nil).DeletePendingScheduledInstanceSnapshots), clusterID)
}

// CreateScheduledInstanceSnapshot mocks base method
func (m *MockSnapshotStore) CreateScheduledInstanceSnapshot(snapshotID, clusterID string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduledInstanceSnapshot", snapshotID, clusterID, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateScheduledInstanceSnapshot indicates an expected call of CreateScheduledInstanceSnapshot
func (mr *MockSnapshotStoreMockRecorder) CreateScheduledInstanceSnapshot(snapshotID, clusterID, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduledInstanceSnapshot", reflect.TypeOf((*MockSnapshotStore)(nil).CreateScheduledInstanceSnapshot), snapshotID, clusterID, timestamp)
}

// MockVersionStore is a mock of VersionStore interface
type MockVersionStore struct {
	ctrl     *gomock.Controller
	recorder *MockVersionStoreMockRecorder
}

// MockVersionStoreMockRecorder is the mock recorder for MockVersionStore
type MockVersionStoreMockRecorder struct {
	mock *MockVersionStore
}

// NewMockVersionStore creates a new mock instance
func NewMockVersionStore(ctrl *gomock.Controller) *MockVersionStore {
	mock := &MockVersionStore{ctrl: ctrl}
	mock.recorder = &MockVersionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVersionStore) EXPECT() *MockVersionStoreMockRecorder {
	return m.recorder
}

// IsIdentityServiceSupportedForVersion mocks base method
func (m *MockVersionStore) IsIdentityServiceSupportedForVersion(appID string, sequence int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIdentityServiceSupportedForVersion", appID, sequence)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsIdentityServiceSupportedForVersion indicates an expected call of IsIdentityServiceSupportedForVersion
func (mr *MockVersionStoreMockRecorder) IsIdentityServiceSupportedForVersion(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIdentityServiceSupportedForVersion", reflect.TypeOf((*MockVersionStore)(nil).IsIdentityServiceSupportedForVersion), appID, sequence)
}

// IsRollbackSupportedForVersion mocks base method
func (m *MockVersionStore) IsRollbackSupportedForVersion(appID string, sequence int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRollbackSupportedForVersion", appID, sequence)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRollbackSupportedForVersion indicates an expected call of IsRollbackSupportedForVersion
func (mr *MockVersionStoreMockRecorder) IsRollbackSupportedForVersion(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRollbackSupportedForVersion", reflect.TypeOf((*MockVersionStore)(nil).IsRollbackSupportedForVersion), appID, sequence)
}

// IsSnapshotsSupportedForVersion mocks base method
func (m *MockVersionStore) IsSnapshotsSupportedForVersion(a *types0.App, sequence int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSnapshotsSupportedForVersion", a, sequence)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSnapshotsSupportedForVersion indicates an expected call of IsSnapshotsSupportedForVersion
func (mr *MockVersionStoreMockRecorder) IsSnapshotsSupportedForVersion(a, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSnapshotsSupportedForVersion", reflect.TypeOf((*MockVersionStore)(nil).IsSnapshotsSupportedForVersion), a, sequence)
}

// GetAppVersionArchive mocks base method
func (m *MockVersionStore) GetAppVersionArchive(appID string, sequence int64, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppVersionArchive", appID, sequence, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAppVersionArchive indicates an expected call of GetAppVersionArchive
func (mr *MockVersionStoreMockRecorder) GetAppVersionArchive(appID, sequence, dstPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppVersionArchive", reflect.TypeOf((*MockVersionStore)(nil).GetAppVersionArchive), appID, sequence, dstPath)
}

// CreateAppVersionArchive mocks base method
func (m *MockVersionStore) CreateAppVersionArchive(appID string, sequence int64, archivePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppVersionArchive", appID, sequence, archivePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppVersionArchive indicates an expected call of CreateAppVersionArchive
func (mr *MockVersionStoreMockRecorder) CreateAppVersionArchive(appID, sequence, archivePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppVersionArchive", reflect.TypeOf((*MockVersionStore)(nil).CreateAppVersionArchive), appID, sequence, archivePath)
}

// CreateAppVersion mocks base method
func (m *MockVersionStore) CreateAppVersion(appID string, currentSequence *int64, appName, appIcon string, kotsKinds *kotsutil.KotsKinds, filesInDir string, gitops types3.DownstreamGitOps, source string, skipPreflights bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppVersion", appID, currentSequence, appName, appIcon, kotsKinds, filesInDir, gitops, source, skipPreflights)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppVersion indicates an expected call of CreateAppVersion
func (mr *MockVersionStoreMockRecorder) CreateAppVersion(appID, currentSequence, appName, appIcon, kotsKinds, filesInDir, gitops, source, skipPreflights interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppVersion", reflect.TypeOf((*MockVersionStore)(nil).CreateAppVersion), appID, currentSequence, appName, appIcon, kotsKinds, filesInDir, gitops, source, skipPreflights)
}

// GetAppVersion mocks base method
func (m *MockVersionStore) GetAppVersion(arg0 string, arg1 int64) (*types11.AppVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppVersion", arg0, arg1)
	ret0, _ := ret[0].(*types11.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppVersion indicates an expected call of GetAppVersion
func (mr *MockVersionStoreMockRecorder) GetAppVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppVersion", reflect.TypeOf((*MockVersionStore)(nil).GetAppVersion), arg0, arg1)
}

// GetAppVersionsAfter mocks base method
func (m *MockVersionStore) GetAppVersionsAfter(arg0 string, arg1 int64) ([]*types11.AppVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppVersionsAfter", arg0, arg1)
	ret0, _ := ret[0].([]*types11.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppVersionsAfter indicates an expected call of GetAppVersionsAfter
func (mr *MockVersionStoreMockRecorder) GetAppVersionsAfter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppVersionsAfter", reflect.TypeOf((*MockVersionStore)(nil).GetAppVersionsAfter), arg0, arg1)
}

// MockLicenseStore is a mock of LicenseStore interface
type MockLicenseStore struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseStoreMockRecorder
}

// MockLicenseStoreMockRecorder is the mock recorder for MockLicenseStore
type MockLicenseStoreMockRecorder struct {
	mock *MockLicenseStore
}

// NewMockLicenseStore creates a new mock instance
func NewMockLicenseStore(ctrl *gomock.Controller) *MockLicenseStore {
	mock := &MockLicenseStore{ctrl: ctrl}
	mock.recorder = &MockLicenseStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLicenseStore) EXPECT() *MockLicenseStoreMockRecorder {
	return m.recorder
}

// GetLatestLicenseForApp mocks base method
func (m *MockLicenseStore) GetLatestLicenseForApp(appID string) (*v1beta1.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestLicenseForApp", appID)
	ret0, _ := ret[0].(*v1beta1.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestLicenseForApp indicates an expected call of GetLatestLicenseForApp
func (mr *MockLicenseStoreMockRecorder) GetLatestLicenseForApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestLicenseForApp", reflect.TypeOf((*MockLicenseStore)(nil).GetLatestLicenseForApp), appID)
}

// GetLicenseForAppVersion mocks base method
func (m *MockLicenseStore) GetLicenseForAppVersion(appID string, sequence int64) (*v1beta1.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseForAppVersion", appID, sequence)
	ret0, _ := ret[0].(*v1beta1.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseForAppVersion indicates an expected call of GetLicenseForAppVersion
func (mr *MockLicenseStoreMockRecorder) GetLicenseForAppVersion(appID, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseForAppVersion", reflect.TypeOf((*MockLicenseStore)(nil).GetLicenseForAppVersion), appID, sequence)
}

// GetAllAppLicenses mocks base method
func (m *MockLicenseStore) GetAllAppLicenses() ([]*v1beta1.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAppLicenses")
	ret0, _ := ret[0].([]*v1beta1.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAppLicenses indicates an expected call of GetAllAppLicenses
func (mr *MockLicenseStoreMockRecorder) GetAllAppLicenses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAppLicenses", reflect.TypeOf((*MockLicenseStore)(nil).GetAllAppLicenses))
}

// MockClusterStore is a mock of ClusterStore interface
type MockClusterStore struct {
	ctrl     *gomock.Controller
	recorder *MockClusterStoreMockRecorder
}

// MockClusterStoreMockRecorder is the mock recorder for MockClusterStore
type MockClusterStoreMockRecorder struct {
	mock *MockClusterStore
}

// NewMockClusterStore creates a new mock instance
func NewMockClusterStore(ctrl *gomock.Controller) *MockClusterStore {
	mock := &MockClusterStore{ctrl: ctrl}
	mock.recorder = &MockClusterStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterStore) EXPECT() *MockClusterStoreMockRecorder {
	return m.recorder
}

// ListClusters mocks base method
func (m *MockClusterStore) ListClusters() ([]*types2.Downstream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters")
	ret0, _ := ret[0].([]*types2.Downstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters
func (mr *MockClusterStoreMockRecorder) ListClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockClusterStore)(nil).ListClusters))
}

// GetClusterIDFromSlug mocks base method
func (m *MockClusterStore) GetClusterIDFromSlug(slug string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterIDFromSlug", slug)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterIDFromSlug indicates an expected call of GetClusterIDFromSlug
func (mr *MockClusterStoreMockRecorder) GetClusterIDFromSlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterIDFromSlug", reflect.TypeOf((*MockClusterStore)(nil).GetClusterIDFromSlug), slug)
}

// GetClusterIDFromDeployToken mocks base method
func (m *MockClusterStore) GetClusterIDFromDeployToken(deployToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterIDFromDeployToken", deployToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterIDFromDeployToken indicates an expected call of GetClusterIDFromDeployToken
func (mr *MockClusterStoreMockRecorder) GetClusterIDFromDeployToken(deployToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterIDFromDeployToken", reflect.TypeOf((*MockClusterStore)(nil).GetClusterIDFromDeployToken), deployToken)
}

// CreateNewCluster mocks base method
func (m *MockClusterStore) CreateNewCluster(userID string, isAllUsers bool, title, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCluster", userID, isAllUsers, title, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewCluster indicates an expected call of CreateNewCluster
func (mr *MockClusterStoreMockRecorder) CreateNewCluster(userID, isAllUsers, title, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCluster", reflect.TypeOf((*MockClusterStore)(nil).CreateNewCluster), userID, isAllUsers, title, token)
}

// SetInstanceSnapshotTTL mocks base method
func (m *MockClusterStore) SetInstanceSnapshotTTL(clusterID, snapshotTTL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceSnapshotTTL", clusterID, snapshotTTL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceSnapshotTTL indicates an expected call of SetInstanceSnapshotTTL
func (mr *MockClusterStoreMockRecorder) SetInstanceSnapshotTTL(clusterID, snapshotTTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceSnapshotTTL", reflect.TypeOf((*MockClusterStore)(nil).SetInstanceSnapshotTTL), clusterID, snapshotTTL)
}

// SetInstanceSnapshotSchedule mocks base method
func (m *MockClusterStore) SetInstanceSnapshotSchedule(clusterID, snapshotSchedule string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceSnapshotSchedule", clusterID, snapshotSchedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceSnapshotSchedule indicates an expected call of SetInstanceSnapshotSchedule
func (mr *MockClusterStoreMockRecorder) SetInstanceSnapshotSchedule(clusterID, snapshotSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceSnapshotSchedule", reflect.TypeOf((*MockClusterStore)(nil).SetInstanceSnapshotSchedule), clusterID, snapshotSchedule)
}

// MockInstallationStore is a mock of InstallationStore interface
type MockInstallationStore struct {
	ctrl     *gomock.Controller
	recorder *MockInstallationStoreMockRecorder
}

// MockInstallationStoreMockRecorder is the mock recorder for MockInstallationStore
type MockInstallationStoreMockRecorder struct {
	mock *MockInstallationStore
}

// NewMockInstallationStore creates a new mock instance
func NewMockInstallationStore(ctrl *gomock.Controller) *MockInstallationStore {
	mock := &MockInstallationStore{ctrl: ctrl}
	mock.recorder = &MockInstallationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstallationStore) EXPECT() *MockInstallationStoreMockRecorder {
	return m.recorder
}

// GetPendingInstallationStatus mocks base method
func (m *MockInstallationStore) GetPendingInstallationStatus() (*types4.InstallStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingInstallationStatus")
	ret0, _ := ret[0].(*types4.InstallStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingInstallationStatus indicates an expected call of GetPendingInstallationStatus
func (mr *MockInstallationStoreMockRecorder) GetPendingInstallationStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingInstallationStatus", reflect.TypeOf((*MockInstallationStore)(nil).GetPendingInstallationStatus))
}
