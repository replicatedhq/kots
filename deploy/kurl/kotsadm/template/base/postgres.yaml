---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kotsadm-postgres
  labels:
    kots.io/kotsadm: "true"
    kots.io/backup: velero
spec:
  replicas: 1
  serviceName: kotsadm-postgres
  selector:
    matchLabels:
      app: kotsadm-postgres
  volumeClaimTemplates:
    - metadata:
        name: kotsadm-postgres
        labels:
          kots.io/kotsadm: "true"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  template:
    metadata:
      labels:
        app: kotsadm-postgres
        kots.io/kotsadm: "true"
        kots.io/backup: velero
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      volumes:
        - name: kotsadm-postgres
          persistentVolumeClaim:
            claimName: kotsadm-postgres
        - name: etc-passwd
          configMap:
            name: kotsadm-postgres
            items:
              - key: passwd
                mode: 420
                path: passwd
        - name: upgrade
          emptyDir: {}
        - name: scripts
          configMap:
            name: kotsadm-postgres
            defaultMode: 0755
            items:
              - key: copy-postgres-10.sh
                path: copy-postgres-10.sh
              - key: upgrade-postgres.sh
                path: upgrade-postgres.sh
      containers:
        - image: postgres:__POSTGRES_14_TAG__
          name: kotsadm-postgres
          ports:
            - name: postgres
              containerPort: 5432
          volumeMounts:
            - name: kotsadm-postgres
              mountPath: /var/lib/postgresql/data
            - mountPath: /etc/passwd
              name: etc-passwd
              subPath: passwd
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pg14data
            - name: POSTGRES_USER
              value: kotsadm
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kotsadm-postgres
                  key: password
            - name: POSTGRES_DB
              value: kotsadm
            - name: POSTGRES_HOST_AUTH_METHOD
              value: md5
          livenessProbe:
            initialDelaySeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            exec:
              command:
                - "/bin/sh"
                - "-i"
                - "-c"
                - "pg_isready -U kotsadm -h 127.0.0.1 -p 5432"
          readinessProbe:
            initialDelaySeconds: 1
            periodSeconds: 1
            timeoutSeconds: 1
            exec:
              command:
                - "/bin/sh"
                - "-i"
                - "-c"
                - "pg_isready -U kotsadm -h 127.0.0.1 -p 5432"
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi

      initContainers:
        - image: postgres:__POSTGRES_10_TAG__
          name: copy-postgres-10
          command:
            - "/scripts/copy-postgres-10.sh"
          volumeMounts:
            - name: kotsadm-postgres
              mountPath: /var/lib/postgresql/data
            - name: etc-passwd
              mountPath: /etc/passwd
              subPath: passwd
            - name: upgrade
              mountPath: /var/lib/postgresql/upgrade
            - name: scripts
              mountPath: /scripts
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_UPGRADE_DIR
              value: /var/lib/postgresql/upgrade
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi

        - image: postgres:__POSTGRES_14_TAG__
          name: upgrade-postgres
          command:
            - "/scripts/upgrade-postgres.sh"
          volumeMounts:
            - name: kotsadm-postgres
              mountPath: /var/lib/postgresql/data
            - name: etc-passwd
              mountPath: /etc/passwd
              subPath: passwd
            - name: upgrade
              mountPath: /var/lib/postgresql/upgrade
            - name: scripts
              mountPath: /scripts
          env:
            - name: PGPORT
              value: "50432" # run on different port to avoid unintended client connections.
            - name: PGDATA
              value: /var/lib/postgresql/data/pg14data
            - name: POSTGRES_USER
              value: kotsadm
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kotsadm-postgres
                  key: password
            - name: POSTGRES_DB
              value: kotsadm
            - name: POSTGRES_HOST_AUTH_METHOD
              value: md5
            - name: POSTGRES_UPGRADE_DIR
              value: /var/lib/postgresql/upgrade
            - name: PGDATAOLD
              value: /var/lib/postgresql/data/pgdata
            - name: PGDATANEW
              value: /var/lib/postgresql/data/pg14data
            - name: PGBINOLD
              value: /var/lib/postgresql/upgrade/pg10/bin
            - name: PGBINNEW
              value: /usr/local/bin
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: kotsadm-postgres
  labels:
    kots.io/kotsadm: "true"
    kots.io/backup: velero
spec:
  selector:
    app: kotsadm-postgres
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
      targetPort: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    kots.io/backup: velero
    kots.io/kotsadm: "true"
  name: kotsadm-postgres
data:
  # Old stretch based image used uid 999, but new alpine based image uses uid 70.
  # UID remapping is needed to allow alpine image access files created by older versions.
  passwd: |-
    root:x:0:0:root:/root:/bin/ash
    postgres:x:999:999:Linux User,,,:/var/lib/postgresql:/bin/sh

  # This script copies the postgres 10 server binary files that are needed for the upgrade.
  # pg_upgrade requires the server binaries for the version of postgres to be upgraded, so copy it to the dedicated 'upgrade' directory.
  copy-postgres-10.sh: |-
    #!/bin/bash

    set -e

    if [ ! -d $PGDATA ]; then
      echo 'postgres 10 data not detected. no-op.'
      exit 0
    fi

    mkdir -p $POSTGRES_UPGRADE_DIR/pg10
    cp -frv /usr/local/* $POSTGRES_UPGRADE_DIR/pg10

  # This script triggers the upgrade process for upgrading postgres 10 to 14
  # - no-op if the data directory for the postgres 10 instance does not exist (new installs & post upgrade).
  # - pg_upgrade requires both data directories to have 700 permissions.
  # - remove postgres 14 data directory if exists because it's automatically created and configured by the entrypoint script, and will fail otherwise.
  # - run the docker entrypoint script to initialize and configure the postgres 14 instance.
  # - pg_upgrade will fail if the database already exists in the postgres 14 instance, and the docker entrypoint script creates it automatically, so:
  #     * start the postgres 14 server.
  #     * wait for the server to be ready.
  #     * connect to the default 'template1' db provided by postgres (because postgres won't allow you to drop a db if you're connected to it).
  #     * drop the database that was created by the docker entrypoint script.
  # - pg_upgrade requires both servers to be stopped, so stop the postgres 14 instance that was started.
  # - in some cases, the postgres 10 instance may not have shut down cleanly, which causes pg_upgrade to fail. start it and shut it down properly.
  # - pg_upgrade has to be run inside a directory where the user has write permissions, so cd into the dedicated 'upgrade' directory.
  # - run the pg_upgrade command.
  # - the pg_upgrade command will generate a 'delete_old_cluster.sh' script that can be used to delete the data of the old postgres instance. run it.
  # - remove the postgres 10 instance's server binaries directory.
  upgrade-postgres.sh: |-
    #!/bin/bash

    set -e

    if [ ! -d $PGDATAOLD ]; then
      echo 'postgres 10 data not detected. no-op.'
      exit 0
    fi

    chmod 700 $PGDATAOLD
    rm -rf $PGDATA

    docker-entrypoint.sh postgres &

    while ! pg_isready -U $POSTGRES_USER -h 127.0.0.1 -p $PGPORT; do sleep 1; done
    psql -U $POSTGRES_USER -c '\connect template1' -c "drop database $POSTGRES_DB with (force)"
    pg_ctl stop -w

    $PGBINOLD/pg_ctl start -w -D $PGDATAOLD
    $PGBINOLD/pg_ctl stop -w -D $PGDATAOLD

    cd $POSTGRES_UPGRADE_DIR
    pg_upgrade -U $POSTGRES_USER -v

    ./delete_old_cluster.sh
    rm -rf pg10
