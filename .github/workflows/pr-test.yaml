name: pr-test

# on:
#   pull_request_target:
#     # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets.
#     # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
#     types: [opened, synchronize, reopened, labeled]

on:
  push:
    branches:
      - team-blue/sc-24474/preflights-strict

jobs:

  test-okteto-env:
    runs-on: ubuntu-latest
    # needs: [can-run-ci]
    steps:
      - name: Test Okteto development environment
        uses: replicatedhq/action-okteto-test@main
        with:
          token: ${{ secrets.OKTETO_TOKEN }}
          branch: ${{ github.head_ref }}


  build-web:
    runs-on: ubuntu-18.04
    # needs: [can-run-ci]
    env:
      YARN_CACHE_FOLDER: /home/runner/work/kots/.cache/yarn
    steps:
      # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets.
      # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      # this action checks out the remote branch and runs CI
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - uses: actions/cache@v2
        with:
          path: ${{ env.YARN_CACHE_FOLDER }}
          key: ${{ runner.os }}-kotsweb-nodecache-${{ hashFiles('./web/yarn.lock') }}
          restore-keys: ${{ runner.os }}-kotsweb-nodecache-

      - name: Get tags
        id: get_tag
        uses: ./actions/version-tag

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '17.x'

      - name: Build web
        env:
          GIT_COMMIT: ${{ github.sha }}
          GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        run: export $(cat .image.env | sed 's/#.*//g' | xargs) && make -C web deps build-kotsadm

      - name: Upload web artifact
        uses: actions/upload-artifact@v2
        with:
          name: web
          path: ./web/dist


  build-kotsadm:
    runs-on: ubuntu-18.04
    needs: [build-web]
    steps:
      # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets.
      # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      # this action creates a branch based on remote branch and runs the tests
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.4'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - uses: actions/cache@v2
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-kots-gocache-${{ hashFiles('./kurl_proxy/go.sum') }}
          restore-keys: ${{ runner.os }}-kots-gocache-

      - name: Build kots
        run: |
          export $(cat .image.env | sed 's/#.*//g' | xargs) && make ci-test kots
          chmod +x bin/kots
      - uses: actions/upload-artifact@v2
        with:
          name: kots
          path: bin/kots

      - name: Download web artifact
        uses: actions/download-artifact@v2
        with:
          name: web
          path: ./web/dist
      - name: Build kotsadm
        run: export $(cat .image.env | sed 's/#.*//g' | xargs) && make build
      - name: build and push kotsadm for e2e
        uses: docker/build-push-action@v2
        with:
          tags: ttl.sh/automated-${{ github.run_id }}/kotsadm:2h
          context: ./
          file: ./deploy/Dockerfile
          push: true


  build-kurl-proxy:
    runs-on: ubuntu-18.04
    # needs: [can-run-ci]
    steps:
      # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets.
      # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      # this action creates a branch based on remote branch and runs the tests
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.4'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - uses: actions/cache@v2
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-kurlproxy-gocache-${{ hashFiles('./kurl_proxy/go.sum') }}
          restore-keys: ${{ runner.os }}-kurlproxy-gocache-


      - run: export $(cat .image.env | sed 's/#.*//g' | xargs) && make -C kurl_proxy build

      - name: build and push kurl_proxy for e2e
        uses: docker/build-push-action@v2
        with:
          tags: ttl.sh/automated-${{ github.run_id }}/kurl-proxy:2h
          context: ./kurl_proxy
          file: ./kurl_proxy/deploy/Dockerfile
          push: true


  build-migrations:
    runs-on: ubuntu-18.04
    # needs: [can-run-ci]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - name: build and push migrations for e2e
        uses: docker/build-push-action@v2
        with:
          tags: ttl.sh/automated-${{ github.run_id }}/kotsadm-migrations:2h
          context: ./migrations
          file: ./migrations/deploy/Dockerfile
          push: true


  push-minio:
    runs-on: ubuntu-18.04
    # needs: [can-run-ci]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - name: load environment variables from .image.env
        uses: falti/dotenv-action@v0.2
        id: dotenv
        with:
          path: .image.env

      - name: push minio for e2e
        run: |
          docker pull minio/minio:${{ steps.dotenv.outputs.minio_tag }}
          docker tag minio/minio:${{ steps.dotenv.outputs.minio_tag }} ttl.sh/automated-${{ github.run_id }}/minio:2h
          docker push ttl.sh/automated-${{ github.run_id }}/minio:2h


  push-postgres:
    runs-on: ubuntu-18.04
    # needs: [can-run-ci]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - name: load environment variables from .image.env
        uses: falti/dotenv-action@v0.2
        id: dotenv
        with:
          path: .image.env

      - name: push postgres for CI
        run: |
          docker pull postgres:${{ steps.dotenv.outputs.postgres_alpine_tag }}
          docker tag postgres:${{ steps.dotenv.outputs.postgres_alpine_tag }} ttl.sh/automated-${{ github.run_id }}/postgres:2h
          docker push ttl.sh/automated-${{ github.run_id }}/postgres:2h


  validate-strict-preflight-checks:
    runs-on: ubuntu-18.04
    needs: [build-kotsadm, build-kurl-proxy, build-migrations, push-minio, push-postgres]
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [v1.20.14-k3s2,v1.21.8-k3s2,v1.22.5-k3s2,v1.23.3-k3s1]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - uses: replicatedhq/action-k3s@main
        id: k3s
        with:
          version: ${{ matrix.k8s_version }}
          ports: '30000:30000'

      - name: download kots binary
        uses: actions/download-artifact@v2
        with:
          name: kots
          path: bin/

      - run: chmod +x bin/kots

      - uses: actions/setup-node@v2
        with:
          node-version: '17.x'

      - name: setup testim
        run: npm i -g @testim/testim-cli

      ## testim tests
      - name: get testim branch
        if: startsWith(github.ref, 'refs/heads/')
        id: get_testim_branch
        run: |
          BRANCH=${GITHUB_REF/refs\/heads\//}
          if [ "$BRANCH" == "main" ]; then
            BRANCH="master"
          fi
          echo ::set-output name=TESTIM_BRANCH::${BRANCH:-master}

      - name: prepare strict-preflight-checks online install
        env:
          APP_NAME: strict-preflight-checks
        run: |
          ./bin/kots \
          install $APP_NAME/automated \
          --no-port-forward \
          --namespace $APP_NAME \
          --shared-password password \
          --kotsadm-registry ttl.sh \
          --kotsadm-namespace automated-${{ github.run_id }} \
          --kotsadm-tag 2h

      - name: execute suite strict-preflight-checks
        env:
          APP_NAME: strict-preflight-checks
        run: |
          set +e
          kubectl apply -f deploy/build-test-pipeline/selenium-standalone.yaml -n $APP_NAME
          kubectl wait --timeout=60s -n $APP_NAME deployment/grid --for condition=available
          ./bin/kots admin-console -n $APP_NAME deployment/grid &
          sleep 4
          echo "KOTSADM_API_TOKEN=`kubectl -n $APP_NAME get secret kotsadm-authstring -o json | jq -r '.data."kotsadm-authstring"' | base64 -d`" > .env
          # TODO change branch name `pa1-strict-test` to `${{ steps.get_testim_branch.outputs.TESTIM_BRANCH }}`
          testim --turbo-mode --base-url kotsadm:3000 --host localhost --port 30000 --token ${{ secrets.TESTIM_ACCESS_TOKEN }} --project wpYAooUimFDgQxY73r17 --branch pa1-strict-test --report-file testim-report.xml --suite $APP_NAME
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "------pods:"
            kubectl -n no-config get pods
            echo "------kotsadm logs"
            kubectl -n $APP_NAME logs deployment/kotsadm
            echo "------previous kotsadm logs"
            kubectl -n $APP_NAME logs -p deployment/kotsadm
          fi
          exit $EXIT_CODE
