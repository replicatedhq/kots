name: build-test

on:
  pull_request_target:
  # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets. 
  # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
    types: [opened, synchronize, reopened, labeled]

jobs:
  can-run-ci:
    runs-on: ubuntu-18.04
    # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets. 
    # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
    # only run this workflow if:
    #   not a fork or user is dependabot or PR is labeled with '@actions/safe-to-test'
    if: >
      github.event.pull_request.head.repo.full_name == github.repository ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, '@actions/safe-to-test')
    steps:
      - name: ok
        run: echo "yes"


  build-web:
    runs-on: ubuntu-18.04
    needs: [can-run-ci]
    steps:
      # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets. 
      # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      # this action checksout the remote branch and runs CI
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - name: Get tags
        id: get_tag
        uses: ./actions/version-tag

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '10.x'

      - name: Build web
        env:
          GIT_COMMIT: ${{ github.sha }}
          GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        run: export $(cat .image.env | sed 's/#.*//g' | xargs) && make -C web deps build-kotsadm

      - name: Upload web artifact
        uses: actions/upload-artifact@v2
        with:
          name: web
          path: ./web/dist


  build-kots:
    runs-on: ubuntu-18.04
    needs: [can-run-ci, build-web]

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.4'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets. 
      # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      # this action checksout the remote branch and runs CI
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Download web artifact
        uses: actions/download-artifact@v2
        with:
          name: web
          path: ./web/dist
      - run: export $(cat .image.env | sed 's/#.*//g' | xargs) && make ci-test kots
      - uses: actions/upload-artifact@v2
        with:
          name: kots
          path: bin/kots


  build-kotsadm:
    runs-on: ubuntu-18.04
    needs: [can-run-ci, build-web]
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.4'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets. 
      # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      # this action creates a branch based on remote branch and runs the tests
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Download web artifact
        uses: actions/download-artifact@v2
        with:
          name: web
          path: ./web/dist
      - run: export $(cat .image.env | sed 's/#.*//g' | xargs) && make kotsadm
      - name: build and push kotsadm for e2e
        uses: docker/build-push-action@v2
        with:
          tags: ttl.sh/automated-${{ github.run_id }}/kotsadm:2h
          context: ./
          file: ./deploy/Dockerfile
          push: true


  build-kurl-proxy:
    runs-on: ubuntu-18.04
    needs: [can-run-ci]
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.4'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets. 
      # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      # this action creates a branch based on remote branch and runs the tests
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - run: export $(cat .image.env | sed 's/#.*//g' | xargs) && make -C kurl_proxy build

      - name: build and push kurl_proxy for e2e
        uses: docker/build-push-action@v2
        with:
          tags: ttl.sh/automated-${{ github.run_id }}/kurl-proxy:2h
          context: ./kurl_proxy
          file: ./kurl_proxy/deploy/Dockerfile
          push: true


  build-migrations:
    runs-on: ubuntu-18.04
    needs: [can-run-ci]
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.4'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # This workflow trigger may lead to malicious PR authors being able to obtain repository write permissions or stealing repository secrets. 
      # Please read https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      # this action creates a branch based on remote branch and runs the tests
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: build and push migrations for e2e
        uses: docker/build-push-action@v2
        with:
          tags: ttl.sh/automated-${{ github.run_id }}/kotsadm-migrations:2h
          context: ./migrations
          file: ./migrations/deploy/Dockerfile
          push: true


  push-minio:
    runs-on: ubuntu-18.04
    needs: [can-run-ci]
    steps:
      - uses: actions/checkout@v2

      - name: load environment variables from .image.env
        uses: falti/dotenv-action@v0.2
        id: dotenv
        with:
          path: .image.env

      - name: push minio for e2e
        run: |
          docker pull minio/minio:${{ steps.dotenv.outputs.minio_tag }}
          docker tag minio/minio:${{ steps.dotenv.outputs.minio_tag }} ttl.sh/automated-${{ github.run_id }}/minio:2h
          docker push ttl.sh/automated-${{ github.run_id }}/minio:2h


  push-postgres:
    runs-on: ubuntu-18.04
    needs: [can-run-ci]
    steps:
      - uses: actions/checkout@v2

      - name: load environment variables from .image.env
        uses: falti/dotenv-action@v0.2
        id: dotenv
        with:
          path: .image.env

      - name: push postgres for CI
        run: |
          docker pull postgres:${{ steps.dotenv.outputs.postgres_alpine_tag }}
          docker tag postgres:${{ steps.dotenv.outputs.postgres_alpine_tag }} ttl.sh/automated-${{ github.run_id }}/postgres:2h
          docker push ttl.sh/automated-${{ github.run_id }}/postgres:2h


  validate-legacy:
    runs-on: ubuntu-18.04
    needs: [can-run-ci, build-kots, build-kotsadm, build-kurl-proxy, build-migrations, push-minio, push-postgres]
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [v1.20.14-k3s2,v1.21.8-k3s2,v1.22.5-k3s2]
    steps:
      - uses: debianmaster/actions-k3s@f7f902f92baf164187a0693bcf7497355a7a79af
        id: k3s
        with:
          version: ${{ matrix.k8s_version }}

      - name: download kots binary
        uses: actions/download-artifact@v2
        with:
          name: kots
          path: bin/

      - run: chmod +x bin/kots

      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: setup testIM
        run: npm i -g @testim/testim-cli@3.206.0
        shell: bash

      ## testim tests

      - name: aws credentials setup
        run: |
          cat > aws-credentials << EOL
          [default]
          aws_access_key_id=${{ secrets.TESTIM_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.TESTIM_AWS_SECRET_ACCESS_KEY }}
          EOL

      - name: velero install
        run: |
          curl -LO https://github.com/vmware-tanzu/velero/releases/download/v1.7.1/velero-v1.7.1-linux-amd64.tar.gz && tar zxvf velero-v1.7.1-linux-amd64.tar.gz && \
          ./velero-v1.7.1-linux-amd64/velero install \
          --provider aws \
          --plugins velero/velero-plugin-for-aws:v1.3.0 \
          --bucket kots-testim-snapshots \
          --backup-location-config region=us-east-1 \
          --snapshot-location-config region=us-east-1 \
          --secret-file ./aws-credentials \
          --prefix /automated-${{ github.run_id }}-${{ matrix.k8s_version }} \
          --use-restic

      - name: prepare legacy tests
        run: |
          set +e
          ./bin/kots \
          install qakotstestim/github-actions-qa \
          --port-forward=false \
          --namespace legacy \
          --shared-password password \
          --kotsadm-registry ttl.sh \
          --kotsadm-namespace automated-${{ github.run_id }} \
          --kotsadm-tag 2h
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "------pods:"
            kubectl -n legacy get pods
            echo "------kotsadm logs"
            kubectl -n legacy logs deployment/kotsadm
            echo "------previous kotsadm logs"
            kubectl -n legacy logs -p deployment/kotsadm
          fi
          exit $EXIT_CODE

      - name: get branch
        if: startsWith(github.ref, 'refs/heads/')
        id: get_branch
        shell: bash
        run: BRANCH=${GITHUB_REF/refs\/heads\//} && echo ::set-output name=GIT_BRANCH::${BRANCH:-main}

      - name: execute legacy tests
        run: |
          set +e
          ./bin/kots admin-console -n legacy &
          ADMIN_CONSOLE_PID=$!
          testim --token ${{ secrets.TESTIM_ACCESS_TOKEN }} --project ${{ secrets.TESTIM_PROJECT_ID }} --grid "Testim-grid" --branch ${{ steps.get_branch.outputs.GIT_BRANCH }} --report-file testim-report.xml --suite legacy --tunnel --tunnel-port 8800
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "------pods:"
            kubectl -n legacy get pods
            echo "------kotsadm logs"
            kubectl -n legacy logs deployment/kotsadm
            echo "------previous kotsadm logs"
            kubectl -n legacy logs -p deployment/kotsadm
            echo "------velero logs"
            kubectl -n velero logs deployment/velero
          fi
          kill $ADMIN_CONSOLE_PID
          exit $EXIT_CODE

      - name: delete velero namespace
        run: kubectl delete namespace velero


  validate-minimal-rbac:
    runs-on: ubuntu-18.04
    needs: [can-run-ci, build-kots, build-kotsadm, build-kurl-proxy, build-migrations, push-minio, push-postgres]
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [v1.20.14-k3s2,v1.21.8-k3s2,v1.22.5-k3s2]
    steps:
      - uses: debianmaster/actions-k3s@f7f902f92baf164187a0693bcf7497355a7a79af
        id: k3s
        with:
          version: ${{ matrix.k8s_version }}

      - name: download kots binary
        uses: actions/download-artifact@v2
        with:
          name: kots
          path: bin/

      - run: chmod +x bin/kots

      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: setup testIM
        run: npm i -g @testim/testim-cli@3.206.0
        shell: bash

      ## testim tests

      - name: get branch
        if: startsWith(github.ref, 'refs/heads/')
        id: get_branch
        shell: bash
        run: BRANCH=${GITHUB_REF/refs\/heads\//} && echo ::set-output name=GIT_BRANCH::${BRANCH:-main}

      - name: prepare minimal-rbac online install
        run: |
          ./bin/kots \
          install minimal-rbac/automated \
          --port-forward=false \
          --namespace minimal-rbac \
          --shared-password password \
          --kotsadm-registry ttl.sh \
          --kotsadm-namespace automated-${{ github.run_id }} \
          --kotsadm-tag 2h
      - name: execute suite bravo
        run: |
          set +e
          ./bin/kots admin-console -n minimal-rbac &
          ADMIN_CONSOLE_PID=$!
          testim --token ${{ secrets.TESTIM_ACCESS_TOKEN }} --project ${{ secrets.TESTIM_PROJECT_ID }} --grid "Testim-grid" --branch ${{ steps.get_branch.outputs.GIT_BRANCH }} --report-file testim-report.xml --suite bravo --tunnel --tunnel-port 8800
          EXIT_CODE=$?
          echo "------pods:"
          kubectl -n minimal-rbac get pods
          echo "------kotsadm logs"
          kubectl -n minimal-rbac logs deployment/kotsadm
          echo "------previous kotsadm logs"
          kubectl -n minimal-rbac logs -p deployment/kotsadm
          kill $ADMIN_CONSOLE_PID
          exit $EXIT_CODE


  validate-no-required-config:
    runs-on: ubuntu-18.04
    needs: [can-run-ci, build-kots, build-kotsadm, build-kurl-proxy, build-migrations, push-minio, push-postgres]
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [v1.20.14-k3s2,v1.21.8-k3s2,v1.22.5-k3s2]
    steps:
      - uses: debianmaster/actions-k3s@f7f902f92baf164187a0693bcf7497355a7a79af
        id: k3s
        with:
          version: ${{ matrix.k8s_version }}

      - name: download kots binary
        uses: actions/download-artifact@v2
        with:
          name: kots
          path: bin/

      - run: chmod +x bin/kots

      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: setup testIM
        run: npm i -g @testim/testim-cli@3.206.0
        shell: bash

      ## testim tests

      - name: get branch
        if: startsWith(github.ref, 'refs/heads/')
        id: get_branch
        shell: bash
        run: BRANCH=${GITHUB_REF/refs\/heads\//} && echo ::set-output name=GIT_BRANCH::${BRANCH:-main}

      - name: prepare no-required-config online install
        env:
          APP_NAME: no-required-config
        run: |
          ./bin/kots \
          install $APP_NAME/automated \
          --port-forward=false \
          --namespace $APP_NAME \
          --shared-password password \
          --kotsadm-registry ttl.sh \
          --kotsadm-namespace automated-${{ github.run_id }} \
          --kotsadm-tag 2h

      - name: execute suite no-required-config
        env:
          APP_NAME: no-required-config
        run: |
          set +e
          ./bin/kots admin-console -n $APP_NAME &
          ADMIN_CONSOLE_PID=$!

          sleep 5
          echo "KOTSADM_API_TOKEN=`kubectl -n $APP_NAME get secret kotsadm-authstring -o json | jq -r '.data."kotsadm-authstring"' | base64 -d`" > .env

          testim --token ${{ secrets.TESTIM_ACCESS_TOKEN }} --project ${{ secrets.TESTIM_PROJECT_ID }} --grid "Testim-grid" --branch ${{ steps.get_branch.outputs.GIT_BRANCH }} --report-file testim-report.xml --suite $APP_NAME --tunnel --tunnel-port 8800
          EXIT_CODE=$?
          echo "------pods:"
          kubectl -n no-config get pods
          echo "------kotsadm logs"
          kubectl -n $APP_NAME logs deployment/kotsadm
          echo "------previous kotsadm logs"
          kubectl -n $APP_NAME logs -p deployment/kotsadm
          kill $ADMIN_CONSOLE_PID
          exit $EXIT_CODE


  validate-multi-namespace:
    runs-on: ubuntu-18.04
    needs: [can-run-ci, build-kots, build-kotsadm, build-kurl-proxy, build-migrations, push-minio, push-postgres]
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [v1.20.14-k3s2,v1.21.8-k3s2,v1.22.5-k3s2]
    steps:
      - uses: debianmaster/actions-k3s@f7f902f92baf164187a0693bcf7497355a7a79af
        id: k3s
        with:
          version: ${{ matrix.k8s_version }}

      - name: download kots binary
        uses: actions/download-artifact@v2
        with:
          name: kots
          path: bin/

      - run: chmod +x bin/kots

      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: setup testIM
        run: npm i -g @testim/testim-cli@3.206.0
        shell: bash

      ## testim tests

      - name: get branch
        if: startsWith(github.ref, 'refs/heads/')
        id: get_branch
        shell: bash
        run: BRANCH=${GITHUB_REF/refs\/heads\//} && echo ::set-output name=GIT_BRANCH::${BRANCH:-main}

      - name: prepare multi-namespace online install
        env:
          APP_NAME: multi-namespace-yeti
        run: |
          ./bin/kots \
          install $APP_NAME/automated \
          --port-forward=false \
          --namespace $APP_NAME \
          --shared-password password \
          --kotsadm-registry ttl.sh \
          --kotsadm-namespace automated-${{ github.run_id }} \
          --kotsadm-tag 2h

      - name: execute suite multi-namespace
        env:
          APP_NAME: multi-namespace-yeti
          SUITE_NAME: multi-namespace
        run: |
          set +e
          ./bin/kots admin-console -n $APP_NAME &
          ADMIN_CONSOLE_PID=$!

          sleep 5
          echo "KOTSADM_API_TOKEN=`kubectl -n $APP_NAME get secret kotsadm-authstring -o json | jq -r '.data."kotsadm-authstring"' | base64 -d`" > .env

          # HACK: with limitted RBAC secrets are not applied by kotsadm
          echo ${{ secrets.MULTI_NAMESPACE_REGISTRY_AUTH }} | base64 -d > replicated-registry-auth.json
          kubectl -n nginx-test create secret generic multi-namespace-yeti-registry --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./replicated-registry-auth.json
          kubectl -n redis-test create secret generic multi-namespace-yeti-registry --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./replicated-registry-auth.json
          kubectl -n redis-test create secret generic multi-namespace-yeti-redis-registry --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./replicated-registry-auth.json
          kubectl -n postgres-test create secret generic multi-namespace-yeti-registry --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./replicated-registry-auth.json

          testim --token ${{ secrets.TESTIM_ACCESS_TOKEN }} --project ${{ secrets.TESTIM_PROJECT_ID }} --grid "Testim-grid" --branch ${{ steps.get_branch.outputs.GIT_BRANCH }} --report-file testim-report.xml --suite $SUITE_NAME --tunnel --tunnel-port 8800
          EXIT_CODE=$?
          echo "------pods:"
          kubectl get pods -A
          echo "------kotsadm logs"
          kubectl -n $APP_NAME logs deployment/kotsadm
          echo "------previous kotsadm logs"
          kubectl -n $APP_NAME logs -p deployment/kotsadm
          kill $ADMIN_CONSOLE_PID
          exit $EXIT_CODE


  validate-kots-pull:
    runs-on: ubuntu-18.04
    needs: [can-run-ci, build-kots, build-kotsadm, build-kurl-proxy, build-migrations, push-minio, push-postgres]
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [v1.20.14-k3s2,v1.21.8-k3s2,v1.22.5-k3s2]
    steps:
      - uses: debianmaster/actions-k3s@f7f902f92baf164187a0693bcf7497355a7a79af
        id: k3s
        with:
          version: ${{ matrix.k8s_version }}

      - name: download kots binary
        uses: actions/download-artifact@v2
        with:
          name: kots
          path: bin/

      - run: chmod +x bin/kots

      - name: run kots pull
        env:
          APP_NAME: multi-namespace-yeti
          APP_SLUG: multi-namespace
        run: |
          set +e
          echo ${{ secrets.MULTI_NAMESPACE_LICENSE }} | base64 -d > license.yaml
          ./bin/kots pull $APP_NAME/automated \
            --license-file license.yaml \
            --shared-password password \
            --namespace $APP_NAME \
            --exclude-admin-console

          kubectl create ns $APP_NAME
          kubectl create ns nginx-test
          kubectl create ns redis-test
          kubectl create ns postgres-test

          # HACK: without operator, additonal namespaces don't get image pull secrets
          echo ${{ secrets.MULTI_NAMESPACE_REGISTRY_AUTH }} | base64 -d > replicated-registry-auth.json
          kubectl -n nginx-test create secret generic multi-namespace-yeti-registry --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./replicated-registry-auth.json
          kubectl -n redis-test create secret generic multi-namespace-yeti-registry --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./replicated-registry-auth.json
          kubectl -n redis-test create secret generic multi-namespace-yeti-redis-registry --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./replicated-registry-auth.json
          kubectl -n postgres-test create secret generic multi-namespace-yeti-registry --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./replicated-registry-auth.json
          kubectl -n default create secret generic multi-namespace-yeti-registry --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./replicated-registry-auth.json

          kustomize build $PWD/$APP_SLUG/overlays/midstream | kubectl apply -f -
          kustomize build $PWD/$APP_SLUG/overlays/midstream/charts/redis | kubectl apply -f -

          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Failed to apply spec"
            kubectl get pods -A
            exit $EXIT_CODE
          fi

          echo "Waiting for pods to start"

          COUNTER=1
          while [ $(kubectl get pods --no-headers | grep -v Running | grep -v Completed | wc -l) -gt 0 ]; do
            COUNTER=$[$COUNTER +1]
            if [ $COUNTER -gt 120 ]; then
              echo "Timed out waiting for pods to start"
              kubectl get pods -A
              exit -1
            fi
            sleep 1
          done

          echo "All pods started"


  # this job will validate that all validate-* jobs succeed
  validate-success:
    runs-on: ubuntu-18.04
    needs: [validate-legacy, validate-minimal-rbac, validate-no-required-config, validate-multi-namespace, validate-kots-pull]
    steps:
      - run: echo "Validate success"
