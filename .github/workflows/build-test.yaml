name: build-test

on:
  push:
    branches:
      - "**"

jobs:
  build-kots:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: "1.14.3"

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - uses: actions/checkout@v2

      - run: make ci-test kots
      - uses: actions/upload-artifact@v2.1.4
        with:
          name: kots
          path: bin/kots

      - run: make -C kotsadm kotsadm
      - run: make -C kotsadm/operator build
      - run: make -C kotsadm/kurl_proxy build
      - env:
          GIT_COMMIT: ${{ github.sha }}
        run: make -C kotsadm/web deps build-kotsadm

      - name: build and push migrations for e2e
        uses: docker/build-push-action@v1
        with:
          repository: ttl.sh/automated-${{ github.run_id }}/kotsadm-migrations
          tags: 2h
          path: ./kotsadm/migrations
          dockerfile: ./kotsadm/migrations/deploy/Dockerfile
      - name: Scan migrations for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ttl.sh/automated-${{ github.run_id }}/kotsadm-migrations:2h
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: build and push kotsadm for e2e
        uses: docker/build-push-action@v1
        with:
          repository: ttl.sh/automated-${{ github.run_id }}/kotsadm
          tags: 2h
          path: ./kotsadm
          dockerfile: ./kotsadm/deploy/Dockerfile          
      - name: Scan kotsadm for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ttl.sh/automated-${{ github.run_id }}/kotsadm:2h
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: build and push operator for e2e
        uses: docker/build-push-action@v1
        with:
          repository: ttl.sh/automated-${{ github.run_id }}/kotsadm-operator
          tags: 2h
          path: ./kotsadm/operator
          dockerfile: ./kotsadm/operator/deploy/Dockerfile          
      - name: Scan operator for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ttl.sh/automated-${{ github.run_id }}/kotsadm-operator:2h
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: build and push kurl_proxy for e2e
        uses: docker/build-push-action@v1
        with:
          repository: ttl.sh/automated-${{ github.run_id }}/kurl-proxy
          tags: 2h
          path: ./kotsadm/kurl_proxy
          dockerfile: ./kotsadm/kurl_proxy/deploy/Dockerfile
      - name: Scan kurl_proxy for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ttl.sh/automated-${{ github.run_id }}/kurl-proxy:2h
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: build and push minio for e2e
        uses: docker/build-push-action@v1
        with:
          repository: ttl.sh/automated-${{ github.run_id }}/minio
          tags: 2h
          path: ./kotsadm/minio
          dockerfile: ./kotsadm/minio/Dockerfile
      - name: Scan minio for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ttl.sh/automated-${{ github.run_id }}/minio:2h
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  validate:
    runs-on: ubuntu-18.04
    needs: build-kots
    strategy:
      matrix:
        k8s_version: [v1.16.9-k3s1,v1.17.4-k3s1,v1.18.2-k3s1]
    steps:
      - uses: debianmaster/actions-k3s@v1.0.1
        id: k3s
        with:
          version: ${{ matrix.k8s_version }}

      - name: download kots binary
        uses: actions/download-artifact@v2.0.5
        with:
          name: kots
          path: bin/

      - run: chmod +x bin/kots

      - uses: actions/setup-node@v2.1.2
        with:
          node-version: '10.x'

      - name: setup testIM
        run: npm i -g @testim/testim-cli
        shell: bash

      ## testim tests

      - name: prepare legacy tests
        run: |
          ./bin/kots \
          install qakots/github-actions \
          --port-forward=false \
          --namespace legacy \
          --shared-password password \
          --kotsadm-registry ttl.sh \
          --kotsadm-namespace automated-${{ github.run_id }} \
          --kotsadm-tag 2h
      - name: execute legacy tests
        run: |
          set +e
          ./bin/kots admin-console -n legacy &
          ADMIN_CONSOLE_PID=$!
          testim --token ${{ secrets.TESTIM_ACCESS_TOKEN }} --project ${{ secrets.TESTIM_PROJECT_ID }} --grid "Testim-grid" --report-file testim-report.xml --suite legacy --tunnel --tunnel-port 8800
          EXIT_CODE=$?
          echo "------pods:"
          kubectl -n legacy get pods
          echo "------kotsadm logs"
          kubectl -n legacy logs deployment/kotsadm
          echo "------previous kotsadm logs"
          kubectl -n legacy logs -p deployment/kotsadm
          echo "------kotsadm-operator logs"
          kubectl -n legacy logs deployment/kotsadm-operator
          echo "------previous kotsadm-operator logs"
          kubectl -n legacy logs -p deployment/kotsadm-operator
          kill $ADMIN_CONSOLE_PID
          exit $EXIT_CODE

      # - name: prepare cluster-admin online install
      #   run: |
      #     ./bin/kots \
      #     install cluster-admin/automated \
      #     --port-forward=false \
      #     --namespace cluster-admin \
      #     --shared-password password \
      #     --kotsadm-registry ttl.sh \
      #     --kotsadm-namespace automated-${{ github.run_id }} \
      #     --kotsadm-tag 2h 
      # - name: execute suite alpha
      #   run: |
      #     ./bin/kots admin-console -n cluster-admin &
      #     ADMIN_CONSOLE_PID=$!
      #     testim --token ${{ secrets.TESTIM_ACCESS_TOKEN }} --project ${{ secrets.TESTIM_PROJECT_ID }} --grid "Testim-grid" --report-file testim-report.xml --suite alpha --tunnel --tunnel-port 8800
      #     kill $ADMIN_CONSOLE_PID

      - name: prepare minimal-rbac online install
        run: |
          ./bin/kots \
          install minimal-rbac/automated \
          --port-forward=false \
          --namespace minimal-rbac \
          --shared-password password \
          --kotsadm-registry ttl.sh \
          --kotsadm-namespace automated-${{ github.run_id }} \
          --kotsadm-tag 2h 
      - name: execute suite bravo
        run: |
          set +e
          ./bin/kots admin-console -n minimal-rbac &
          ADMIN_CONSOLE_PID=$!
          testim --token ${{ secrets.TESTIM_ACCESS_TOKEN }} --project ${{ secrets.TESTIM_PROJECT_ID }} --grid "Testim-grid" --report-file testim-report.xml --suite bravo --tunnel --tunnel-port 8800
          EXIT_CODE=$?
          echo "------pods:"
          kubectl -n minimal-rbac get pods
          echo "------kotsadm logs"
          kubectl -n minimal-rbac logs deployment/kotsadm
          echo "------previous kotsadm logs"
          kubectl -n minimal-rbac logs -p deployment/kotsadm
          echo "------kotsadm-operator logs"
          kubectl -n minimal-rbac logs deployment/kotsadm-operator
          echo "------previos kotsadm-operator logs"
          kubectl -n minimal-rbac logs -p deployment/kotsadm-operator
          kill $ADMIN_CONSOLE_PID
          exit $EXIT_CODE
