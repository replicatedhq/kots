name: kotsadm-build

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"

jobs:

  generate-schema:
    runs-on: ubuntu-18.04
    container:
      image: schemahero/schemahero:0.12.2
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate fixtures
        run: |
          /schemahero fixtures \
            --input-dir ./migrations/tables \
            --output-dir ./migrations/fixtures/schema \
            --dbname ship-cloud --driver postgres

      - name: Upload schema artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: schema
          path: ./migrations/fixtures/schema/fixtures.sql


  generate-fixtures:
    runs-on: ubuntu-18.04
    needs: [generate-schema]
    container:
      image: replicated/gitops-builder:buildkite
      options: --user root
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Download schema artifact
      uses: actions/download-artifact@v2.0.10
      with:
        name: schema
        path: ./migrations/fixtures/schema

    - name: Build fixtures
      run: make -C migrations/fixtures deps build run

    - name: Upload fixtures artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: fixtures
        path: ./migrations/fixtures/fixtures.sql


  publish-fixtures:
    runs-on: ubuntu-18.04
    needs: [generate-fixtures]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Download fixtures artifact
      uses: actions/download-artifact@v2.0.10
      with:
        name: fixtures
        path: ./migrations/fixtures

    - name: Publish fixtures
      if: ${{ github.ref == 'refs/heads/master' }}
      run: |
        make -C migrations/fixtures publish


  build-schema-migrations:
    runs-on: ubuntu-18.04
    needs: [publish-fixtures]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: azure/docker-login@v1
      env:
        DOCKER_CONFIG: ./migrations/.docker
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - name: Build
      if: ${{ github.ref == 'refs/heads/master' }}
      env:
        DOCKER_CONFIG: ./.docker
      run: |
        make -C migrations schema-alpha

    - name: "Release schema migrations on tag"
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      env:
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        DOCKER_CONFIG: ./.docker
      uses: ./actions/containers
      with:
        command: "make -C migrations schema-release"

    - name: Upload airgap image
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: migrations-image
        path: ./migrations/bin/docker-archive


  test_web:
    runs-on: ubuntu-18.04
    needs: [build-schema-migrations]
    container:
      image: replicated/gitops-builder:buildkite
      options: --user root
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node.js environment
      uses: actions/setup-node@v2.3.0
      with:
        node-version: '10'

    - name: Install cross-env
      run: npm i -g cross-env
      shell: bash

    # - name: Test web
    #   env:
    #     PACT_BROKER_USERNAME: ${{ secrets.PACT_BROKER_USERNAME }}
    #     PACT_BROKER_PASSWORD: ${{ secrets.PACT_BROKER_PASSWORD }}
    #   run: |
    #     make -C kotsadm/web deps test publish-pact

      # TODO: migrate retry logic for pacts
      # retry:
      #   automatic:
      #     # this command exiting with status 2 typically means that the yarn package failed to download
      #     - exit_status: 2
      #       limit: 5


  build_web:
    runs-on: ubuntu-18.04
    needs: [build-schema-migrations]
    container:
      image: replicated/gitops-builder:buildkite
      options: --user root
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - name: Setup Node.js environment
      uses: actions/setup-node@v2.3.0
      with:
        node-version: '10'

    - name: Build web
      env:
        GIT_COMMIT: ${{ github.sha }}
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
      run: make -C web deps build-kotsadm
      ## TODO: retry logic
      # retry:
      #   automatic:
      #     # this command exiting with status 2 typically means that the yarn package failed to download
      #     - exit_status: 2
      #       limit: 5

    - name: Upload web artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: web
        path: ./web/dist


  build_operator:
    runs-on: ubuntu-18.04
    needs: [build-schema-migrations]
    container:
      image: replicated/gitops-builder:buildkite-go14-node10
      options: --user root
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - name: Build operator
      env:
        GIT_COMMIT: ${{ github.sha }}
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        SCOPE_DSN_PUBLIC: ""
      run: SCOPE_DSN=$SCOPE_DSN_PUBLIC make -C kotsadm/operator test build

    - name: Upload operator bin artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: operator
        path: ./kotsadm/operator/bin

    - name: Upload operator pact artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: operator
        path: ./kotsadm/operator/pacts


  build_kurl_proxy:
    runs-on: ubuntu-18.04
    needs: [build-schema-migrations]
    container:
      image: replicated/gitops-builder:buildkite-go14-node10
      options: --user root
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v2.1.3
      with:
        go-version: '^1.16.3'

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - name: Build kurl_proxy
      env:
        GIT_COMMIT: ${{ github.sha }}
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        SCOPE_DSN_PUBLIC: ""
      run: make -C kurl_proxy test build

    - name: Upload kurl_proxy artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: kurl_proxy
        path: ./kurl_proxy/bin


  build_go_api:
    runs-on: ubuntu-18.04
    needs: [test_web, build_web, build_operator, build_kurl_proxy]
    container:
      image: replicated/gitops-builder:buildkite-go14-node10
      options: --user root
    steps:
    - uses: actions/setup-go@v2.1.3
      with:
        go-version: '^1.16.3'

    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Checkout
      uses: actions/checkout@v1 # not @v2 because of: https://github.com/actions/checkout/issues/126

    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - name: Download web artifact
      uses: actions/download-artifact@v2.0.10
      with:
        name: web
        path: ./web/dist

    - name: Build Go API
      env:
        GIT_COMMIT: ${{ github.sha }}
        # GITHUB_SHA: ${{ github.sha }}
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        # GITHUB_REPOSITORY:
        # GITHUB_WORKSPACE:
        SCOPE_DSN_PUBLIC: ""
      run: make test kotsadm

    - name: Upload Go API artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: go_api
        path: ./bin


  release_go_api_alpha:
    runs-on: ubuntu-18.04
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [build_web, build_go_api]
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2.1.3
      with:
        go-version: '^1.16.3'

    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Download go_api artifact
      uses: actions/download-artifact@v2.0.10
      with:
        name: go_api
        path: ./bin

    - name: Add executable permissions
      run: chmod a+x ./bin/kotsadm

    - uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build alpha release
      env:
        GIT_COMMIT: ${{ github.sha }}
      run: |
        make build-alpha


  release_go_api_tagged:
    runs-on: ubuntu-18.04
    needs: [build_web, build_go_api]
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2.1.3
      with:
        go-version: '^1.16.3'

    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - name: Download go_api artifact
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/download-artifact@v2.0.10
      with:
        name: go_api
        path: ./bin

    - name: Add executable permissions
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      run: chmod a+x ./bin/kotsadm

    - uses: azure/docker-login@v1
      env:
        DOCKER_CONFIG: ./.docker
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build tagged release
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      env:
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        DOCKER_CONFIG: ./.docker
      uses: ./actions/containers
      with:
        command: "make build-release"

    - name: Upload airgap image
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: kotsadm-image
        path: ./bin/docker-archive


  release_operator_alpha:
    runs-on: ubuntu-18.04
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [build_operator]
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2.1.3
      with:
        go-version: '^1.16.3'

    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Download operator artifact
      uses: actions/download-artifact@v2.0.10
      with:
        name: operator
        path: ./kotsadm/operator/bin

    - name: Add executable permissions
      run: chmod a+x ./kotsadm/operator/bin/kotsadm-operator

    - uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build alpha release
      env:
        GIT_COMMIT: ${{ github.sha }}
      run: |
        make -C kotsadm/operator build-alpha


  release_operator_tagged:
    runs-on: ubuntu-18.04
    needs: [build_operator]
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2.1.3
      with:
        go-version: '^1.16.3'

    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - name: Download operator artifact
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/download-artifact@v2.0.10
      with:
        name: operator
        path: ./kotsadm/operator/bin

    - name: Add executable permissions
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      run: chmod a+x ./kotsadm/operator/bin/kotsadm-operator

    - name: Copy binary
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      run: |
        mkdir -p kotsadm/operator/deploy/bin
        cp kotsadm/operator/bin/kotsadm-operator kotsadm/operator/deploy/bin/kotsadm-operator

    - uses: azure/docker-login@v1
      env:
        DOCKER_CONFIG: ./kotsadm/operator/.docker
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build tagged release
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      env:
        GIT_COMMIT: ${{ github.sha }}
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        DOCKER_CONFIG: ./.docker
      uses: ./actions/containers
      with:
        command: "make -C kotsadm/operator build-release"

    - name: Upload airgap image
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: kotsadm-operator-image
        path: ./kotsadm/operator/bin/docker-archive


  build_kurl_proxy_alpha:
    runs-on: ubuntu-18.04
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [build_kurl_proxy]
    steps:
    - uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Setup Go
      uses: actions/setup-go@v2.1.3
      with:
        go-version: '^1.16.3'

    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Download kurl_proxy artifact
      uses: actions/download-artifact@v2.0.10
      with:
        name: kurl_proxy
        path: ./kurl_proxy/bin

    - name: Add executable permissions
      run: chmod a+x ./kurl_proxy/bin/kurl_proxy

    - name: Build alpha release
      env:
        GIT_COMMIT: ${{ github.sha }}
      run: |
        make -C kurl_proxy build-alpha


  build_kurl_proxy_tagged:
    runs-on: ubuntu-18.04
    needs: [build_kurl_proxy]
    steps:
    - uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Setup Go
      uses: actions/setup-go@v2.1.3
      with:
        go-version: '^1.16.3'

    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
    - uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - name: Download kurl_proxy artifact
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/download-artifact@v2.0.10
      with:
        name: kurl_proxy
        path: ./kurl_proxy/bin

    - name: Add executable permissions
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      run: chmod a+x ./kurl_proxy/bin/kurl_proxy

    - name: Build tagged release
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      env:
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
      run: |
        make -C kurl_proxy build-release


  build_kurl_addon_alpha:
    runs-on: ubuntu-18.04
    needs: [release_go_api_alpha, release_operator_alpha, build_kurl_proxy_alpha]
    steps:
      - name: Build kURL addon alpha package
        if: ${{ github.ref == 'refs/heads/master' }}
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          package=kotsadm-alpha.tar.gz
          curl -H "Authorization: token $GH_PAT" \
            -H 'Accept: application/json' \
            -d "{\"event_type\": \"build-package-staging\", \"client_payload\": {\"package\": \"${package}\"}}" \
            "https://api.github.com/repos/replicatedhq/kurl/dispatches"


  scan_postgres_alpine:
    runs-on: ubuntu-18.04
    needs: [build-schema-migrations]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Scan postgres image
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: "postgres:10.17-alpine"
          fail-build: false
          acs-report-enable: true
          severity-cutoff: high

      - name: Upload scan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  scan_postgres_debian_stretch:
    runs-on: ubuntu-18.04
    needs: [build-schema-migrations]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Scan postgres image
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: "postgres:10.17"
          fail-build: false
          acs-report-enable: true
          severity-cutoff: high
      - name: Upload scan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  scan_migrations:
    runs-on: ubuntu-18.04
    needs: [build-schema-migrations]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Scan migrations image
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: "kotsadm/kotsadm-migrations:alpha"
          fail-build: false
          acs-report-enable: true
          severity-cutoff: high

      - name: Upload scan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  scan_minio:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Scan minio image
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: "minio/minio:RELEASE.2021-07-27T02-40-15Z"
          fail-build: false
          acs-report-enable: true
          severity-cutoff: high

      - name: Upload scan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  scan_kurl_proxy:
    runs-on: ubuntu-18.04
    needs: [build_kurl_proxy_alpha]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Scan kurl proxy image
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: "kotsadm/kurl-proxy:alpha"
          fail-build: false
          acs-report-enable: true
          severity-cutoff: high

      - name: Upload scan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  scan_operator:
    runs-on: ubuntu-18.04
    needs: [release_operator_alpha]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Scan operator image
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: "kotsadm/kotsadm-operator:alpha"
          fail-build: false
          acs-report-enable: true
          severity-cutoff: high

      - name: Upload scan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  scan_kotsadm:
    runs-on: ubuntu-18.04
    needs: [release_go_api_alpha]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Scan kotsadm image
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: "kotsadm/kotsadm:alpha"
          fail-build: false
          acs-report-enable: true
          severity-cutoff: high

      - name: Upload scan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  scan_dex:
    runs-on: ubuntu-18.04
    needs: [release_go_api_alpha]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Scan dex image
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: "ghcr.io/dexidp/dex:v2.28.1"
          fail-build: false
          acs-report-enable: true
          severity-cutoff: high

      - name: Upload scan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}


  build_airgap:
    runs-on: ubuntu-18.04
    needs: [release_go_api_tagged, release_operator_tagged]
    steps:
    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - name: Download migrations
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/download-artifact@v2.0.10
      with:
        name: migrations-image
        path: ./docker-archive

    - name: Download kotsadm image
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/download-artifact@v2.0.10
      with:
        name: kotsadm-image
        path: ./docker-archive

    - name: Download kotsadm-operator image
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/download-artifact@v2.0.10
      with:
        name: kotsadm-operator-image
        path: ./docker-archive

    - name: Get Release
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      id: get_release
      uses: bruceadams/get-release@v1.2.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Make kotsadm airgap archive
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      run: |
        tar czf ./kotsadm.tar.gz -C ./ ./docker-archive

    - name: Upload airgap bundle
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/replicatedhq/kots/releases/${{ steps.get_release.outputs.id }}/assets?name=kotsadm.tar.gz
        asset_path: ./kotsadm.tar.gz
        asset_name: kotsadm.tar.gz
        asset_content_type: application/gzip


  start_kgrid_test:
    runs-on: ubuntu-18.04
    needs: [release_go_api_tagged, release_operator_tagged]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_tag
      shell: bash
      run: echo ::set-output name=GIT_TAG::${GITHUB_REF/refs\/tags\//}

    - uses: kceb/pull-request-url-action@v2
      id: pr_url

    - name: Expose git commit data
      uses: rlespinasse/git-commit-data-action@v1.x

    - name: Create staging gitops commit
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      env:
        REPLICATEDCOM_GITHUB_PRIVATE_KEY: ${{ secrets.REPLICATEDCOM_GITHUB_PRIVATE_KEY }}
        PR_URL: ${{ steps.pr_url.outputs.url }}
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        GITOPS_OWNER: replicatedcom
        GITOPS_REPO: gitops-deploy
        GITOPS_BRANCH: master
      run: ./hack/deploy-kgrid.sh

    - name: Create production gitops commit
      if: ${{ steps.get_tag.outputs.GIT_TAG != '' }}
      env:
        REPLICATEDCOM_GITHUB_PRIVATE_KEY: ${{ secrets.REPLICATEDCOM_GITHUB_PRIVATE_KEY }}
        PR_URL: ${{ steps.pr_url.outputs.url }}
        GIT_TAG: ${{ steps.get_tag.outputs.GIT_TAG }}
        OVERLAY: production
        GITOPS_OWNER: replicatedcom
        GITOPS_REPO: gitops-deploy
        GITOPS_BRANCH: release
      run: ./hack/deploy-kgrid.sh
