name: 'KOTS E2E'
description: 'Composite action for running KOTS e2e test'
inputs:
  test-focus:
    description: 'Name of the test for FOCUS'
    required: true
  kots-namespace:
    description: 'KOTS namespace'
    required: true
  k8s-version:
    description: 'K8s version'
    required: true
  testim-access-token:
    description: 'Testim access token'
    required: true
  testim-branch:
    description: 'Testim branch'
    default: 'master'
    required: false
  kotsadm-image-registry:
    description: 'Kotsadm image registry'
    default: 'ttl.sh'
    required: false
  kotsadm-image-namespace:
    description: 'Kotsadm image namespace'
    required: false
  kotsadm-image-tag:
    description: 'Kotsadm image tag'
    default: '24h'
    required: false
  kots-helm-chart-url:
    description: 'KOTS Helm chart URL'
    required: false
  kots-helm-chart-version:
    description: 'KOTS Helm chart version'
    required: false
  kots-airgap:
    description: 'Run KOTS with the --airgap flag'
    type: boolean
    default: false
    required: false
  aws-access-key-id:
    description: 'AWS access key id for uploading support bundle'
    required: false
  aws-secret-access-key:
    description: 'AWS secret access key for uploading support bundle'
    required: false
  aws-region:
    description: 'AWS region for uploading support bundle'
    default: 'us-east-1'
    required: false
runs:
  using: "composite"
  steps:
    # TODO: use k3d eventually but this is difficult to support with ${{ inputs.k8s-version }}
    - uses: replicatedhq/action-k3s@main
      with:
        version: ${{ inputs.k8s-version }}

    - name: execute suite "${{ inputs.test-focus }}"
      env:
        TESTIM_ACCESS_TOKEN: ${{ inputs.testim-access-token }}
        KOTS_NAMESPACE: ${{ inputs.kots-namespace }}
      run: |
        make -C e2e test \
          FOCUS="${{ inputs.test-focus }}" \
          EXISTING_KUBECONFIG=$KUBECONFIG \
          TESTIM_BRANCH=${{ inputs.testim-branch }} \
          KOTSADM_IMAGE_REGISTRY=${{ inputs.kotsadm-image-registry }} \
          KOTSADM_IMAGE_NAMESPACE=${{ inputs.kotsadm-image-namespace || format('automated-{0}', github.run_id) }} \
          KOTSADM_IMAGE_TAG=${{ inputs.kotsadm-image-tag }} \
          KOTS_HELM_CHART_URL=${{ inputs.kots-helm-chart-url }} \
          KOTS_HELM_CHART_VERSION=${{ inputs.kots-helm-chart-version }} \
          AIRGAP=${{ inputs.kots-airgap }} \
          SKIP_TEARDOWN=1
        EXIT_CODE=$?
        if [ $EXIT_CODE -ne 0 ]; then
          echo "------pods:"
          kubectl -n $KOTS_NAMESPACE get pods
          echo "------kotsadm logs"
          kubectl -n $KOTS_NAMESPACE logs deployment/kotsadm
          echo "------previous kotsadm logs"
          kubectl -n $KOTS_NAMESPACE logs -p deployment/kotsadm
        fi
        exit $EXIT_CODE
      shell: bash

    - name: Generate support bundle on failure
      if: ${{ failure() && inputs.aws-access-key-id && inputs.aws-secret-access-key }}
      uses: ./.github/actions/generate-support-bundle
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        kots-namespace: ${{ inputs.kots-namespace }}
