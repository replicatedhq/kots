name: 'KOTS E2E'
description: 'Composite action for running KOTS e2e test'
inputs:
  test-focus:
    description: 'Name of the test for FOCUS'
    required: true
  kots-namespace:
    description: 'KOTS namespace'
    required: true
  k8s-version:
    description: 'K8s version'
    required: true
  platform:
    description: 'Platform to run tests on (k3s, gke)'
    required: true
  k8s-arguments:
    description: 'arguments to pass to k8s'
    required: false
  testim-access-token:
    description: 'Testim access token'
    required: true
  testim-branch:
    description: 'Testim branch'
    default: 'master'
    required: false
  kotsadm-image-registry:
    description: 'Kotsadm image registry'
    default: 'ttl.sh'
    required: false
  kotsadm-image-namespace:
    description: 'Kotsadm image namespace'
    required: false
  kotsadm-image-tag:
    description: 'Kotsadm image tag'
    default: '24h'
    required: false
  kots-helm-chart-url:
    description: 'KOTS Helm chart URL'
    required: false
  kots-helm-chart-version:
    description: 'KOTS Helm chart version'
    required: false
  kots-airgap:
    description: 'Run KOTS with the --airgap flag'
    type: boolean
    default: false
    required: false
  aws-access-key-id:
    description: 'AWS access key id for uploading support bundle'
    required: false
  aws-secret-access-key:
    description: 'AWS secret access key for uploading support bundle'
    required: false
  aws-region:
    description: 'AWS region for uploading support bundle'
    default: 'us-east-1'
    required: false
  gke-service-key:
    description: 'Service key to authenticate a Google Cloud service account'
    required: false
  gke-cluster-region:
    description: GKE cluster region to use
    default: "us-west1"
    required: false
  gke-cluster-network:
    description: GKE cluster network tag
    default: "projects/replicated-qa/global/networks/default"
    required: false
  gke-cluster-subnetwork:
    description: GKE cluster subnetwork tag
    default: "projects/replicated-qa/regions/us-west1/subnetworks/default"
    required: false
  gke-project:
    description: Google Cloud project name
    default: "replicated-qa"
    required: false

runs:
  using: "composite"
  steps:
    - name: Generate GKE cluster name
      if: inputs.platform == 'gke'
      id: cluster-name
      shell: bash
      run: |
        echo "cluster_name=kots-ci-test-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}" >> $GITHUB_OUTPUT
      
    - name: Authenticate to Google Cloud
      if: inputs.platform == 'gke'
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ inputs.gke-service-key }}

    - name: Setup Cloud SDK
      if: inputs.platform == 'gke'
      uses: google-github-actions/setup-gcloud@v1
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Create the GKE cluster
      if: inputs.platform == 'gke'
      shell: bash
      run: |
        gcloud container clusters create-auto "${{ steps.cluster-name.outputs.cluster_name }}" --project "${{ inputs.gke-project }}" --region "${{ inputs.gke-cluster-region }}" --network "${{ inputs.gke-cluster-network }}"  --subnetwork "${{ inputs.gke-cluster-subnetwork }}"

    - name: Get GKE cluster credentials for kubectl
      if: inputs.platform == 'gke'
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ steps.cluster-name.outputs.cluster_name }}
        location: ${{ inputs.gke-cluster-region }}
        project_id: ${{ inputs.gke-project }}

    # TODO: use k3d eventually but this is difficult to support with ${{ inputs.k8s-version }}
    - name: Generate a k3s cluster
      if: inputs.platform == 'k3s'
      uses: replicatedhq/action-k3s@main
      with:
        version: ${{ inputs.k8s-version }}
        arguments: ${{ inputs.k8s-arguments }}

    - name: execute suite "${{ inputs.test-focus }}"
      env:
        TESTIM_ACCESS_TOKEN: ${{ inputs.testim-access-token }}
        KOTS_NAMESPACE: ${{ inputs.kots-namespace }}
      run: |
        make -C e2e test \
          FOCUS="${{ inputs.test-focus }}" \
          EXISTING_KUBECONFIG=$KUBECONFIG \
          TESTIM_BRANCH=${{ inputs.testim-branch }} \
          KOTSADM_IMAGE_REGISTRY=${{ inputs.kotsadm-image-registry }} \
          KOTSADM_IMAGE_NAMESPACE=${{ inputs.kotsadm-image-namespace || format('automated-{0}', github.run_id) }} \
          KOTSADM_IMAGE_TAG=${{ inputs.kotsadm-image-tag }} \
          KOTS_HELM_CHART_URL=${{ inputs.kots-helm-chart-url }} \
          KOTS_HELM_CHART_VERSION=${{ inputs.kots-helm-chart-version }} \
          AIRGAP=${{ inputs.kots-airgap }} \
          SKIP_TEARDOWN=1
      shell: bash

    - name: Print logs on failure
      if: ${{ failure() }}
      env:
        KOTS_NAMESPACE: ${{ inputs.kots-namespace }}
        VELERO_NAMESPACE: velero
      run: |
        set +e
        echo "------pods:"
        kubectl -n $KOTS_NAMESPACE get pods
        echo "------kotsadm logs"
        kubectl -n $KOTS_NAMESPACE logs deployment/kotsadm
        echo "------previous kotsadm logs"
        kubectl -n $KOTS_NAMESPACE logs -p deployment/kotsadm
        echo "------velero logs"
        kubectl -n $VELERO_NAMESPACE logs deployment/velero
        echo "------previous velero logs"
        kubectl -n $VELERO_NAMESPACE logs -p deployment/velero
        echo "------node-agent logs"
        kubectl -n $VELERO_NAMESPACE logs daemonset/node-agent
        echo "------previous node-agent logs"
        kubectl -n $VELERO_NAMESPACE logs -p daemonset/node-agent
      shell: bash

    - name: Generate support bundle on failure
      if: ${{ failure() && inputs.aws-access-key-id && inputs.aws-secret-access-key }}
      uses: ./.github/actions/generate-support-bundle
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Delete GKE cluster if created
      if: ${{ always() && inputs.platform == 'gke' }}
      shell: bash
      run: |
        gcloud -q container clusters delete "${{ steps.cluster-name.outputs.cluster_name }}" --project "${{ inputs.gke-project }}" --region "${{ inputs.gke-cluster-region }}"
