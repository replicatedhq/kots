name: 'KOTS E2E'
description: 'Composite action for running KOTS e2e test'
inputs:
  test-focus:
    description: 'Name of the test for FOCUS'
    required: true
  kots-namespace:
    description: 'KOTS namespace'
    required: true
  k8s-distribution:
    description: 'Kubernetes distribution'
    default: 'k3s'
    required: false
  k8s-version:
    description: 'Kubernetes version'
    default: 'v1.26'
    required: false
  k8s-cluster-ttl:
    description: 'TTL for c11y matrix clusters'
    default: '2h'
    required: false
  k8s-cluster-skip-teardown:
    description: 'Skip cluster teardown'
    default: 'false'
    required: false
  testim-access-token:
    description: 'Testim access token'
    required: true
  testim-branch:
    description: 'Testim branch'
    default: 'master'
    required: false
  kotsadm-image-registry:
    description: 'Kotsadm image registry'
    default: 'ttl.sh'
    required: false
  kotsadm-image-namespace:
    description: 'Kotsadm image namespace'
    required: false
  kotsadm-image-tag:
    description: 'Kotsadm image tag'
    default: '24h'
    required: false
  kots-helm-chart-url:
    description: 'KOTS Helm chart URL'
    required: false
  kots-helm-chart-version:
    description: 'KOTS Helm chart version'
    required: false
  kots-airgap:
    description: 'Run KOTS with the --airgap flag'
    default: "false"
    required: false
  aws-access-key-id:
    description: 'AWS access key id for uploading support bundle'
    required: false
  aws-secret-access-key:
    description: 'AWS secret access key for uploading support bundle'
    required: false
  aws-region:
    description: 'AWS region for uploading support bundle'
    default: 'us-east-1'
    required: false
  gke-service-key:
    description: 'Service key to authenticate a Google Cloud service account'
    required: false
  replicated-api-token:
    description: 'Replicated API token for C11y matrix'
    required: false

outputs:
  cluster-id:
    description: 'ID of the c11y matrix cluster created by create-cluster action'
    value: ${{ steps.create-cluster.outputs.cluster-id }}

runs:
  using: "composite"
  steps:
    - name: Create a GKE cluster
      if: inputs.k8s-distribution == 'gke'
      uses: ./.github/actions/kots-gke-create
      with:
        service-key: ${{ inputs.gke-service-key }}

    - name: Create a local k3s cluster
      if: inputs.k8s-distribution == 'k3s-local'
      uses: replicatedhq/action-k3s@main
      with:
        version: ${{ inputs.k8s-version }}

    - name: Create a c11y matrix cluster 
      id: create-cluster 
      uses: replicatedhq/replicated-actions/create-cluster@v1
      if: ${{ inputs.k8s-distribution == 'k3s' || inputs.k8s-distribution == 'kind' || inputs.k8s-distribution == 'eks' }}
      with: 
        api-token: ${{ inputs.replicated-api-token }}
        kubernetes-distribution: ${{ inputs.k8s-distribution }}
        kubernetes-version: ${{ inputs.k8s-version }}
        cluster-name: automated-kots-${{ github.run_id }}-${{ inputs.k8s-distribution }}-${{ inputs.k8s-version }}
        timeout-minutes: '120'
        ttl: ${{ inputs.k8s-cluster-ttl }}
        export-kubeconfig: true

    - name: execute suite "${{ inputs.test-focus }}"
      env:
        TESTIM_ACCESS_TOKEN: ${{ inputs.testim-access-token }}
        KOTS_NAMESPACE: ${{ inputs.kots-namespace }}
      run: |
        make -C e2e test \
          FOCUS="${{ inputs.test-focus }}" \
          EXISTING_KUBECONFIG=$KUBECONFIG \
          TESTIM_BRANCH=${{ inputs.testim-branch }} \
          KOTSADM_IMAGE_REGISTRY=${{ inputs.kotsadm-image-registry }} \
          KOTSADM_IMAGE_NAMESPACE=${{ inputs.kotsadm-image-namespace || format('automated-{0}', github.run_id) }} \
          KOTSADM_IMAGE_TAG=${{ inputs.kotsadm-image-tag }} \
          KOTS_HELM_CHART_URL=${{ inputs.kots-helm-chart-url }} \
          KOTS_HELM_CHART_VERSION=${{ inputs.kots-helm-chart-version }} \
          AIRGAP=${{ inputs.kots-airgap }} \
          SKIP_TEARDOWN=1
      shell: bash

    - name: Print logs on failure
      if: ${{ failure() }}
      env:
        KOTS_NAMESPACE: ${{ inputs.kots-namespace }}
        VELERO_NAMESPACE: velero
      run: |
        set +e
        echo "------pods:"
        kubectl -n $KOTS_NAMESPACE get pods
        echo "------kotsadm logs"
        kubectl -n $KOTS_NAMESPACE logs deployment/kotsadm
        echo "------previous kotsadm logs"
        kubectl -n $KOTS_NAMESPACE logs -p deployment/kotsadm
        echo "------velero logs"
        kubectl -n $VELERO_NAMESPACE logs deployment/velero
        echo "------previous velero logs"
        kubectl -n $VELERO_NAMESPACE logs -p deployment/velero
        echo "------node-agent logs"
        kubectl -n $VELERO_NAMESPACE logs daemonset/node-agent
        echo "------previous node-agent logs"
        kubectl -n $VELERO_NAMESPACE logs -p daemonset/node-agent
      shell: bash

    - name: Generate support bundle on failure
      if: ${{ failure() && inputs.aws-access-key-id && inputs.aws-secret-access-key }}
      uses: ./.github/actions/generate-support-bundle
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Remove Cluster
      id: remove-cluster
      uses: replicatedhq/replicated-actions/remove-cluster@v1
      if: ${{ inputs.k8s-cluster-skip-teardown != 'true' && steps.create-cluster.outputs.cluster-id != '' }}
      continue-on-error: true
      with:
        api-token: ${{ inputs.replicated-api-token }}
        cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}

    - name: Delete GKE cluster if created
      if: ${{ always() && inputs.platform == 'gke' }}
      uses: ./.github/actions/kots-gke-delete
      with:
        service-key: ${{ inputs.gke-service-key }}
