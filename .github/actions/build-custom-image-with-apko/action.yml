name: 'Build and push a custom image with apko'
description: 'Composite action for building and pushing a custom image with apko'
inputs:
  context:
    description: 'Path to the context directory'
    required: true

  component:
    description: 'Name of the component (e.g. kotsadm, kurl-proxy, etc...)'
    required: true

  git-tag:
    description: 'Git tag'
    required: true

  image-name:
    description: 'Full destination image name'
    required: true

  registry:
    description: 'Registry to login to'
    default: ''
    required: false

  registry-username:
    description: 'Username to login to registry'
    default: ''
    required: false

  registry-password:
    description: 'Password to login to registry'
    default: ''
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: ${{ inputs.component }}-melange-packages-*
        path: ./packages/
        merge-multiple: true

    - uses: actions/download-artifact@v4
      with:
        pattern: ${{ inputs.component }}-melange-rsa-pub-*
        merge-multiple: true

    - name: template apko config
      shell: bash
      run: |
        export GIT_TAG=${{ inputs.git-tag }}
        envsubst '${GIT_TAG}' < ${{ inputs.context }}/apko.yaml.tmpl > ${{ inputs.context }}/apko.yaml

    - uses: docker/login-action@v3
      if: ${{ inputs.registry != '' }}
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}

    - uses: chainguard-images/actions/apko-build@v1.0.0
      with:
        config: ${{ inputs.context }}/apko.yaml
        archs: amd64,arm64
        tag: ${{ inputs.image-name }}
        vcs-url: true

    - name: Docker push
      shell: bash
      run: |
        docker push ${{ inputs.image-name }}
