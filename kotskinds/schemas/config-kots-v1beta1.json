{
  "description": "Config is the Schema for the config API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ConfigSpec defines the desired state of ConfigSpec",
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "title"
            ],
            "properties": {
              "description": {
                "type": "string"
              },
              "items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "type"
                  ],
                  "properties": {
                    "affix": {
                      "type": "string"
                    },
                    "countByGroup": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer"
                      }
                    },
                    "data": {
                      "type": "string"
                    },
                    "default": {
                      "description": "BoolOrString is a type that can hold an bool or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a booolean string or raw bool.",
                      "oneOf": [{"type": "string"},{"type": "boolean"}]
                    },
                    "error": {
                      "type": "string"
                    },
                    "filename": {
                      "type": "string"
                    },
                    "help_text": {
                      "type": "string"
                    },
                    "hidden": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "title"
                        ],
                        "properties": {
                          "default": {
                            "description": "BoolOrString is a type that can hold an bool or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a booolean string or raw bool.",
                            "oneOf": [{"type": "string"},{"type": "boolean"}]
                          },
                          "name": {
                            "type": "string"
                          },
                          "recommended": {
                            "type": "boolean"
                          },
                          "title": {
                            "type": "string"
                          },
                          "value": {
                            "description": "BoolOrString is a type that can hold an bool or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a booolean string or raw bool.",
                            "oneOf": [{"type": "string"},{"type": "boolean"}]
                          }
                        }
                      }
                    },
                    "minimumCount": {
                      "type": "integer"
                    },
                    "multi_value": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "multiple": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "readonly": {
                      "type": "boolean"
                    },
                    "recommended": {
                      "type": "boolean"
                    },
                    "repeatable": {
                      "type": "boolean"
                    },
                    "required": {
                      "type": "boolean"
                    },
                    "templates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "apiVersion",
                          "kind",
                          "name"
                        ],
                        "properties": {
                          "apiVersion": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          },
                          "yamlPath": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "title": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "value": {
                      "description": "BoolOrString is a type that can hold an bool or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a booolean string or raw bool.",
                      "oneOf": [{"type": "string"},{"type": "boolean"}]
                    },
                    "valuesByGroup": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "when": {
                      "description": "QuotedBool is a string type that can also unmarshal raw yaml bools.",
                      "oneOf": [{"type": "string"},{"type": "boolean"}]
                    },
                    "write_once": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "name": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "when": {
                "description": "QuotedBool is a string type that can also unmarshal raw yaml bools.",
                "oneOf": [{"type": "string"},{"type": "boolean"}]
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "ConfigStatus defines the observed state of Config",
      "type": "object"
    }
  }
}